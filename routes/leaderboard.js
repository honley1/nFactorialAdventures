const express = require('express');
const router = express.Router();

// –í—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –ª–∏–¥–µ—Ä–±–æ—Ä–¥–∞
const leaderboard = new Map();

// GET /api/leaderboard - –ü–æ–ª—É—á–∏—Ç—å —Ç–æ–ø –∏–≥—Ä–æ–∫–æ–≤
router.get('/', async (req, res) => {
    try {
        const limit = parseInt(req.query.limit) || 10;
        
        // –ò–º–∏—Ç–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –ª–∏–¥–µ—Ä–±–æ—Ä–¥–∞
        const mockLeaderboard = [
            {
                id: '1',
                username: 'AlmazCoder',
                avatar: 'üíé',
                totalScore: 9500,
                highestWeekCompleted: 10,
                fastestCompletion: 240 // –º–∏–Ω—É—Ç—ã
            },
            {
                id: '2',
                username: 'ReactNinja',
                avatar: 'ü•∑',
                totalScore: 8750,
                highestWeekCompleted: 9,
                fastestCompletion: 280
            },
            {
                id: '3',
                username: 'JSMaster',
                avatar: 'üë®‚Äçüíª',
                totalScore: 8200,
                highestWeekCompleted: 8,
                fastestCompletion: 320
            },
            {
                id: '4',
                username: 'CoffeeAddict',
                avatar: '‚òï',
                totalScore: 7800,
                highestWeekCompleted: 8,
                fastestCompletion: 350
            },
            {
                id: '5',
                username: 'NightCoder',
                avatar: 'üåô',
                totalScore: 7200,
                highestWeekCompleted: 7,
                fastestCompletion: 400
            }
        ];
        
        const topPlayers = mockLeaderboard
            .slice(0, limit)
            .map((player, index) => ({
                ...player,
                rank: index + 1
            }));
        
        res.json({
            success: true,
            leaderboard: topPlayers,
            totalPlayers: mockLeaderboard.length
        });
        
    } catch (error) {
        console.error('Get leaderboard error:', error);
        res.status(500).json({
            success: false,
            message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ª–∏–¥–µ—Ä–±–æ—Ä–¥–∞'
        });
    }
});

// GET /api/leaderboard/user/:userId - –ü–æ–ª—É—á–∏—Ç—å –ø–æ–∑–∏—Ü–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
router.get('/user/:userId', async (req, res) => {
    try {
        const { userId } = req.params;
        
        // –ò–º–∏—Ç–∞—Ü–∏—è –ø–æ–∑–∏—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const userPosition = {
            rank: Math.floor(Math.random() * 100) + 1,
            totalScore: Math.floor(Math.random() * 5000) + 1000,
            weeklyRank: Math.floor(Math.random() * 50) + 1,
            weeklyScore: Math.floor(Math.random() * 1000) + 100
        };
        
        res.json({
            success: true,
            userPosition
        });
        
    } catch (error) {
        console.error('Get user position error:', error);
        res.status(500).json({
            success: false,
            message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–∑–∏—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è'
        });
    }
});

// GET /api/leaderboard/weekly - –ü–æ–ª—É—á–∏—Ç—å –Ω–µ–¥–µ–ª—å–Ω—ã–π –ª–∏–¥–µ—Ä–±–æ—Ä–¥
router.get('/weekly', async (req, res) => {
    try {
        const week = parseInt(req.query.week) || 1;
        const limit = parseInt(req.query.limit) || 10;
        
        // –ò–º–∏—Ç–∞—Ü–∏—è –Ω–µ–¥–µ–ª—å–Ω–æ–≥–æ –ª–∏–¥–µ—Ä–±–æ—Ä–¥–∞
        const weeklyLeaderboard = [
            {
                id: '1',
                username: 'SpeedRunner',
                avatar: '‚ö°',
                weeklyScore: 950,
                weekNumber: week,
                completionTime: 45 // –º–∏–Ω—É—Ç—ã
            },
            {
                id: '2',
                username: 'Perfectionist',
                avatar: '‚ú®',
                weeklyScore: 900,
                weekNumber: week,
                completionTime: 60
            },
            {
                id: '3',
                username: 'Hustler',
                avatar: 'üî•',
                weeklyScore: 850,
                weekNumber: week,
                completionTime: 55
            }
        ];
        
        const topWeeklyPlayers = weeklyLeaderboard
            .slice(0, limit)
            .map((player, index) => ({
                ...player,
                rank: index + 1
            }));
        
        res.json({
            success: true,
            weeklyLeaderboard: topWeeklyPlayers,
            week,
            totalPlayers: weeklyLeaderboard.length
        });
        
    } catch (error) {
        console.error('Get weekly leaderboard error:', error);
        res.status(500).json({
            success: false,
            message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –Ω–µ–¥–µ–ª—å–Ω–æ–≥–æ –ª–∏–¥–µ—Ä–±–æ—Ä–¥–∞'
        });
    }
});

// POST /api/leaderboard/submit - –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç
router.post('/submit', async (req, res) => {
    try {
        const { userId, weekNumber, score, completionTime } = req.body;
        
        if (!userId || !weekNumber || !score) {
            return res.status(400).json({
                success: false,
                message: '–û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è: userId, weekNumber, score'
            });
        }
        
        // –ò–º–∏—Ç–∞—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
        const result = {
            id: Date.now().toString(),
            userId,
            weekNumber,
            score,
            completionTime: completionTime || 0,
            submittedAt: new Date()
        };
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –≤—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
        leaderboard.set(`${userId}_${weekNumber}`, result);
        
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–æ–≤—É—é –ø–æ–∑–∏—Ü–∏—é (–∏–º–∏—Ç–∞—Ü–∏—è)
        const newRank = Math.floor(Math.random() * 50) + 1;
        
        res.json({
            success: true,
            message: '–†–µ–∑—É–ª—å—Ç–∞—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!',
            result,
            newRank,
            scoreImprovement: Math.floor(Math.random() * 200) + 50
        });
        
    } catch (error) {
        console.error('Submit score error:', error);
        res.status(500).json({
            success: false,
            message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞'
        });
    }
});

module.exports = router; 