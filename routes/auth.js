const express = require('express');
const router = express.Router();

// –í—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–±–µ–∑ MongoDB –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)
const users = new Map();

// POST /api/auth/login - –í—Ö–æ–¥/—Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
router.post('/login', async (req, res) => {
    try {
        const { username, avatar, telegramUser } = req.body;
        
        if (!username || username.trim().length < 2) {
            return res.status(400).json({
                success: false,
                message: '–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 2 —Å–∏–º–≤–æ–ª–∞'
            });
        }
        
        const userId = username.toLowerCase();
        let user = users.get(userId);
        let isNewUser = false;
        
        if (!user) {
            // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user = {
                id: Date.now().toString(),
                username: username.trim(),
                avatar: avatar || 'ü§ì',
                currentWeek: 1,
                totalScore: 0,
                highestWeekCompleted: 0,
                telegramData: telegramUser,
                createdAt: new Date(),
                lastLoginAt: new Date()
            };
            users.set(userId, user);
            isNewUser = true;
        } else {
            // –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –≤—Ö–æ–¥–∞
            user.lastLoginAt = new Date();
            users.set(userId, user);
        }
        
        // –°–æ–∑–¥–∞–µ–º –∏–≥—Ä–æ–≤—É—é —Å–µ—Å—Å–∏—é
        const gameSession = {
            id: Date.now().toString(),
            weekNumber: user.currentWeek,
            resources: {
                coffee: 100,
                motivation: 100,
                knowledge: 0,
                sleep: 100
            },
            position: {
                x: 5,
                y: 15
            },
            currentMission: "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ nFactorial! –ù–∞–π–¥–∏ –∫–æ—Ñ–µ-–º–∞—à–∏–Ω—É ‚òï"
        };
        
        res.json({
            success: true,
            message: isNewUser ? '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ nFactorial!' : '–° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º!',
            user: {
                id: user.id,
                username: user.username,
                avatar: user.avatar,
                currentWeek: user.currentWeek,
                totalScore: user.totalScore,
                highestWeekCompleted: user.highestWeekCompleted
            },
            gameSession,
            isNewUser
        });
        
    } catch (error) {
        console.error('Login error:', error);
        res.status(500).json({
            success: false,
            message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—Ö–æ–¥–µ –≤ —Å–∏—Å—Ç–µ–º—É'
        });
    }
});

// GET /api/auth/check-username/:username - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –∏–º–µ–Ω–∏
router.get('/check-username/:username', async (req, res) => {
    try {
        const { username } = req.params;
        
        if (username.length < 2) {
            return res.json({
                success: false,
                available: false,
                message: '–ò–º—è —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ'
            });
        }
        
        const userId = username.toLowerCase();
        const existingUser = users.get(userId);
        
        res.json({
            success: true,
            available: !existingUser,
            message: existingUser ? '–ò–º—è —É–∂–µ –∑–∞–Ω—è—Ç–æ' : '–ò–º—è –¥–æ—Å—Ç—É–ø–Ω–æ'
        });
        
    } catch (error) {
        console.error('Check username error:', error);
        res.status(500).json({
            success: false,
            message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∏–º–µ–Ω–∏'
        });
    }
});

// GET /api/auth/avatars - –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∞–≤–∞—Ç–∞—Ä–æ–≤
router.get('/avatars', (req, res) => {
    const avatars = [
        { emoji: 'ü§ì', name: '–ù–µ—Ä–¥', description: '–ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–π –ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç' },
        { emoji: 'üòé', name: '–ö—Ä—É—Ç–æ–π', description: '–£–≤–µ—Ä–µ–Ω–Ω—ã–π –≤ —Å–µ–±–µ' },
        { emoji: 'üöÄ', name: '–†–∞–∫–µ—Ç–∞', description: '–ë—ã—Å—Ç—Ä—ã–π –∏ –∞–º–±–∏—Ü–∏–æ–∑–Ω—ã–π' },
        { emoji: 'üíª', name: '–•–∞–∫–µ—Ä', description: '–õ—é–±–∏—Ç–µ–ª—å —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π' },
        { emoji: 'üß†', name: '–ú–æ–∑–≥', description: '–£–º–Ω—ã–π –∏ –≤–¥—É–º—á–∏–≤—ã–π' },
        { emoji: '‚òï', name: '–ö–æ—Ñ–µ–º–∞–Ω', description: '–ù–µ –º–æ–∂–µ—Ç –±–µ–∑ –∫–æ—Ñ–µ' },
        { emoji: 'üí™', name: '–°–∏–ª—å–Ω—ã–π', description: '–ú–æ—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–Ω—ã–π' },
        { emoji: 'üéÆ', name: '–ì–µ–π–º–µ—Ä', description: '–õ—é–±–∏—Ç–µ–ª—å –∏–≥—Ä' },
        { emoji: 'üî•', name: '–û–≥–æ–Ω—å', description: '–≠–Ω–µ—Ä–≥–∏—á–Ω—ã–π' },
        { emoji: '‚ö°', name: '–ú–æ–ª–Ω–∏—è', description: '–ë—ã—Å—Ç—Ä—ã–π –∫–∞–∫ –º–æ–ª–Ω–∏—è' }
    ];
    
    res.json({
        success: true,
        avatars
    });
});

// GET /api/auth/user/:id - –ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
router.get('/user/:id', async (req, res) => {
    try {
        const user = Array.from(users.values()).find(u => u.id === req.params.id);
        
        if (!user) {
            return res.status(404).json({
                success: false,
                message: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω'
            });
        }
        
        res.json({
            success: true,
            user: {
                ...user,
                achievementsCount: 0,
                totalAchievements: 5,
                weeklyProgress: []
            }
        });
        
    } catch (error) {
        console.error('Get user error:', error);
        res.status(500).json({
            success: false,
            message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è'
        });
    }
});

module.exports = router; 