const express = require('express');
const router = express.Router();

// –í—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –∏–≥—Ä–æ–≤—ã—Ö —Å–µ—Å—Å–∏–π
const gameSessions = new Map();

// POST /api/game/save - –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–≥—Ä–æ–≤–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å
router.post('/save', async (req, res) => {
    try {
        const { userId, weekNumber, resources, position, currentMission } = req.body;
        
        if (!userId) {
            return res.status(400).json({
                success: false,
                message: 'ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω'
            });
        }
        
        const sessionId = `${userId}_${weekNumber}`;
        const gameSession = {
            id: sessionId,
            userId,
            weekNumber,
            resources: resources || {
                coffee: 100,
                motivation: 100,
                knowledge: 0,
                sleep: 100
            },
            position: position || { x: 5, y: 15 },
            currentMission: currentMission || "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ nFactorial!",
            lastSaveAt: new Date(),
            events: []
        };
        
        gameSessions.set(sessionId, gameSession);
        
        res.json({
            success: true,
            message: '–ü—Ä–æ–≥—Ä–µ—Å—Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω',
            gameSession
        });
        
    } catch (error) {
        console.error('Save game error:', error);
        res.status(500).json({
            success: false,
            message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∏–≥—Ä—ã'
        });
    }
});

// GET /api/game/load/:userId/:week - –ó–∞–≥—Ä—É–∑–∏—Ç—å –∏–≥—Ä–æ–≤–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å
router.get('/load/:userId/:week', async (req, res) => {
    try {
        const { userId, week } = req.params;
        const sessionId = `${userId}_${week}`;
        
        let gameSession = gameSessions.get(sessionId);
        
        if (!gameSession) {
            // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é —Å–µ—Å—Å–∏—é
            gameSession = {
                id: sessionId,
                userId,
                weekNumber: parseInt(week),
                resources: {
                    coffee: 100,
                    motivation: 100,
                    knowledge: 0,
                    sleep: 100
                },
                position: { x: 5, y: 15 },
                currentMission: `–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–µ–¥–µ–ª—é ${week}!`,
                lastSaveAt: new Date(),
                events: []
            };
            gameSessions.set(sessionId, gameSession);
        }
        
        res.json({
            success: true,
            gameSession
        });
        
    } catch (error) {
        console.error('Load game error:', error);
        res.status(500).json({
            success: false,
            message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏–≥—Ä—ã'
        });
    }
});

// POST /api/game/interact - –û–±—Ä–∞–±–æ—Ç–∞—Ç—å –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ —Å –æ–±—ä–µ–∫—Ç–æ–º
router.post('/interact', async (req, res) => {
    try {
        const { userId, weekNumber, objectType, currentResources } = req.body;
        
        const sessionId = `${userId}_${weekNumber}`;
        let gameSession = gameSessions.get(sessionId);
        
        if (!gameSession) {
            return res.status(404).json({
                success: false,
                message: '–ò–≥—Ä–æ–≤–∞—è —Å–µ—Å—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞'
            });
        }
        
        let message = '';
        let newResources = { ...currentResources };
        
        switch (objectType) {
            case 'coffee_machine':
                if (newResources.coffee < 100) {
                    newResources.coffee = Math.min(100, newResources.coffee + 30);
                    message = '–ö–æ—Ñ–µ –≤–æ—Å–ø–æ–ª–Ω–µ–Ω! +30 ‚òï';
                } else {
                    message = '–£–∂–µ –º–∞–∫—Å–∏–º—É–º –∫–æ—Ñ–µ!';
                }
                break;
                
            case 'computer':
                if (newResources.coffee > 20) {
                    newResources.knowledge += 10;
                    newResources.coffee -= 10;
                    newResources.motivation -= 5;
                    message = '–ö–æ–¥–∏–Ω–≥! +10 Knowledge üß†';
                } else {
                    message = '–ù—É–∂–Ω–æ –±–æ–ª—å—à–µ –∫–æ—Ñ–µ –¥–ª—è –∫–æ–¥–∏–Ω–≥–∞!';
                }
                break;
                
            case 'mentor':
                if (newResources.knowledge > 30) {
                    newResources.motivation += 20;
                    newResources.knowledge -= 10;
                    message = '–ú–µ–Ω—Ç–æ—Ä –¥–∞–ª —Å–æ–≤–µ—Ç! +20 Motivation üí™';
                } else {
                    message = '–ò–∑—É—á–∏ –±–æ–ª—å—à–µ, –ø–æ—Ç–æ–º –ø—Ä–∏—Ö–æ–¥–∏!';
                }
                break;
                
            default:
                message = '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –æ–±—ä–µ–∫—Ç';
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å–µ—Å—Å–∏—é
        gameSession.resources = newResources;
        gameSession.lastSaveAt = new Date();
        gameSession.events.push({
            type: `${objectType}_interaction`,
            timestamp: new Date(),
            message
        });
        
        gameSessions.set(sessionId, gameSession);
        
        res.json({
            success: true,
            message,
            resources: newResources,
            gameSession
        });
        
    } catch (error) {
        console.error('Interact error:', error);
        res.status(500).json({
            success: false,
            message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–∏'
        });
    }
});

// GET /api/game/missions/:week - –ü–æ–ª—É—á–∏—Ç—å –º–∏—Å—Å–∏–∏ –¥–ª—è –Ω–µ–¥–µ–ª–∏
router.get('/missions/:week', async (req, res) => {
    try {
        const { week } = req.params;
        const weekNum = parseInt(week);
        
        const missions = {
            1: [
                {
                    id: 'welcome',
                    title: '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!',
                    description: '–ù–∞–π–¥–∏ –∫–æ—Ñ–µ-–º–∞—à–∏–Ω—É –∏ –≤–æ—Å–ø–æ–ª–Ω–∏ —ç–Ω–µ—Ä–≥–∏—é',
                    reward: 'coffee',
                    completed: false
                },
                {
                    id: 'first_code',
                    title: '–ü–µ—Ä–≤—ã–π –∫–æ–¥',
                    description: '–ù–∞–ø–∏—à–∏ —Å–≤–æ—é –ø–µ—Ä–≤—É—é —Å—Ç—Ä–æ—á–∫—É –∫–æ–¥–∞',
                    reward: 'knowledge',
                    completed: false
                },
                {
                    id: 'mentor_talk',
                    title: '–ü–æ–≥–æ–≤–æ—Ä–∏ —Å –º–µ–Ω—Ç–æ—Ä–æ–º',
                    description: '–ù–∞–π–¥–∏ –º–µ–Ω—Ç–æ—Ä–∞ –∏ –ø–æ–ª—É—á–∏ —Å–æ–≤–µ—Ç',
                    reward: 'motivation',
                    completed: false
                }
            ],
            2: [
                {
                    id: 'html_master',
                    title: 'HTML –ú–∞—Å—Ç–µ—Ä',
                    description: '–ò–∑—É—á–∏ –æ—Å–Ω–æ–≤—ã HTML',
                    reward: 'knowledge',
                    completed: false
                }
            ]
        };
        
        res.json({
            success: true,
            missions: missions[weekNum] || []
        });
        
    } catch (error) {
        console.error('Get missions error:', error);
        res.status(500).json({
            success: false,
            message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –º–∏—Å—Å–∏–π'
        });
    }
});

module.exports = router; 