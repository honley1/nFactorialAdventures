// nFactorial DOOM - –ü–æ–ª–Ω—ã–π –¥–≤–∏–∂–æ–∫ —Å raycasting
class NFactorialDoom {
    constructor() {
        // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ Telegram
        this.tg = window.Telegram?.WebApp;
        this.user = null;
        this.gameSession = null;

        // –ò–≥—Ä–æ–≤–æ–π –º–∏—Ä (16x16 –∫–∞—Ä—Ç–∞)
        this.worldMap = [
            [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],
            [1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1],
            [1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1],
            [1,0,0,1,1,1,0,0,0,0,1,1,1,0,0,1],
            [1,0,0,1,0,0,0,0,0,0,0,0,1,0,0,1],
            [1,0,0,1,0,0,0,0,0,0,0,0,1,0,0,1],
            [1,0,0,0,0,0,0,1,1,0,0,0,0,0,0,1],
            [1,0,0,0,0,0,0,1,1,0,0,0,0,0,0,1],
            [1,0,0,1,0,0,0,0,0,0,0,0,1,0,0,1],
            [1,0,0,1,0,0,0,0,0,0,0,0,1,0,0,1],
            [1,0,0,1,1,1,0,0,0,0,1,1,1,0,0,1],
            [1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1],
            [1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1],
            [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]
        ];

        // –ò–≥—Ä–æ–∫
        this.player = {
            x: 8.5,        // –ü–æ–∑–∏—Ü–∏—è X
            y: 8.5,        // –ü–æ–∑–∏—Ü–∏—è Y  
            angle: 0,      // –£–≥–æ–ª –ø–æ–≤–æ—Ä–æ—Ç–∞
            health: 100,   // –ó–¥–æ—Ä–æ–≤—å–µ
            armor: 100,    // –ë—Ä–æ–Ω—è
            ammo: 50,      // –ü–∞—Ç—Ä–æ–Ω—ã
            moveSpeed: 0.05,
            turnSpeed: 0.03
        };

        // –ù–ü–° —Å–∏—Å—Ç–µ–º–∞
        this.npcs = [
            {
                id: 'mentor_alex',
                name: '–ú–µ–Ω—Ç–æ—Ä –ê–ª–µ–∫—Å',
                x: 2, y: 2,
                sprite: 'üë®‚Äçüíª',
                dialogue: [
                    '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ nFactorial DOOM!',
                    '–¢–µ–±–µ –ø—Ä–µ–¥—Å—Ç–æ–∏—Ç –ø—Ä–æ–π—Ç–∏ —á–µ—Ä–µ–∑ –ª–∞–±–∏—Ä–∏–Ω—Ç –±—É—Ç–∫–µ–º–ø–∞.',
                    '–°–æ–±–∏—Ä–∞–π –∫–æ—Ñ–µ ‚òï, –∏–∑—É—á–∞–π –º–∞—Ç–µ—Ä–∏–∞–ª—ã üìö, –∏ –æ—Å—Ç–µ—Ä–µ–≥–∞–π—Å—è –±–∞–≥–æ–≤ üêõ!'
                ],
                currentDialogue: 0
            },
            {
                id: 'student_helper',
                name: '–°—Ç—É–¥–µ–Ω—Ç-–ø–æ–º–æ—â–Ω–∏–∫',
                x: 14, y: 2,
                sprite: 'üßë‚Äçüéì',
                dialogue: [
                    '–ó–¥–µ—Å—å –ø–æ–ª–Ω–æ –¥–µ–¥–ª–∞–π–Ω–æ–≤! –ë—É–¥—å –æ—Å—Ç–æ—Ä–æ–∂–µ–Ω!',
                    '–ï—Å–ª–∏ –∫–æ–Ω—á–∏—Ç—Å—è –º–æ—Ç–∏–≤–∞—Ü–∏—è, –∏–≥—Ä–∞ –∑–∞–∫–æ–Ω—á–∏—Ç—Å—è...'
                ],
                currentDialogue: 0
            }
        ];

        // –í—Ä–∞–≥–∏ - —Ä–∞–∑–º–µ—â–∞–µ–º –∏—Ö –ø–æ–¥–∞–ª—å—à–µ –æ—Ç –∏–≥—Ä–æ–∫–∞
        this.enemies = [
            { id: 'bug1', type: 'bug', x: 3, y: 3, health: 30, sprite: 'üêõ', lastAttack: 0 },
            { id: 'deadline1', type: 'deadline', x: 13, y: 13, health: 50, sprite: '‚è∞', lastAttack: 0 }
        ];

        // –ü—Ä–µ–¥–º–µ—Ç—ã –¥–ª—è —Å–±–æ—Ä–∞ - —Ä–∞–∑–º–µ—â–∞–µ–º –≤ –±–µ–∑–æ–ø–∞—Å–Ω—ã—Ö –º–µ—Å—Ç–∞—Ö
        this.items = [
            { id: 'coffee1', type: 'coffee', x: 2, y: 8, sprite: '‚òï', value: 25 },
            { id: 'book1', type: 'knowledge', x: 14, y: 2, sprite: 'üìö', value: 10 },
            { id: 'energy1', type: 'motivation', x: 2, y: 12, sprite: 'üí™', value: 20 }
        ];

        // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ raycasting
        this.fov = Math.PI / 3;      // 60¬∞ –ø–æ–ª–µ –∑—Ä–µ–Ω–∏—è
        this.rayCount = 320;         // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª—É—á–µ–π
        this.maxDistance = 16;       // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–∏—Å—Ç–∞–Ω—Ü–∏—è
        
        // Canvas –∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç
        this.canvas = null;
        this.ctx = null;
        this.minimapCanvas = null;
        this.minimapCtx = null;

        // –°–æ—Å—Ç–æ—è–Ω–∏–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        this.keys = {};
        this.mouse = { locked: false, sensitivity: 0.002 };
        this.mobile = this.isMobile();
        this.joystick = { active: false, centerX: 0, centerY: 0, knobX: 0, knobY: 0 };

        // –°–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä—ã
        this.gameState = 'loading';  // loading, menu, playing, paused
        this.dialogue = { active: false, npc: null, messageIndex: 0 };
        
        this.init();
    }

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
    async init() {
        console.log('üéÆ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è nFactorial DOOM...');
        
        try {
            // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram
            this.initTelegram();
            
            // –ü–æ–∫–∞–∑–∞—Ç—å —ç–∫—Ä–∞–Ω –∑–∞–≥—Ä—É–∑–∫–∏
            this.showScreen('loading-screen');
            await this.simulateLoading();
            
            // –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
            await this.authenticateUser();
            
            // –ü–µ—Ä–µ—Ö–æ–¥ –≤ –º–µ–Ω—é
            this.gameState = 'menu';
            this.showScreen('menu-screen');
            this.setupEventListeners();
            
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏:', error);
            this.showNotification('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–≥—Ä—ã', 'error');
        }
    }

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram
    initTelegram() {
        if (this.tg) {
            this.tg.ready();
            this.tg.expand();
            console.log('üì± Telegram WebApp –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
        }
    }

    // –°–∏–º—É–ª—è—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏
    async simulateLoading() {
        const progressBar = document.getElementById('loading-progress');
        const loadingTexts = [
            '–ó–∞–≥—Ä—É–∂–∞–µ–º –ª–∞–±–∏—Ä–∏–Ω—Ç—ã –±—É—Ç–∫–µ–º–ø–∞...',
            '–ì–æ—Ç–æ–≤–∏–º –∫–æ—Ñ–µ –¥–ª—è —Å—Ç—É–¥–µ–Ω—Ç–æ–≤...',
            '–ö–æ–º–ø–∏–ª–∏—Ä—É–µ–º –∫–æ–¥ –º–µ–Ω—Ç–æ—Ä–æ–≤...',
            '–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–∏—Å—Ç–µ–º—É –±–∞–≥–æ–≤...',
            '–°–æ–∑–¥–∞–µ–º –¥–µ–¥–ª–∞–π–Ω—ã...'
        ];
        
        for (let i = 0; i <= 100; i += 2) {
            progressBar.style.width = i + '%';
            
            if (i % 20 === 0) {
                const textIndex = Math.floor(i / 20);
                if (loadingTexts[textIndex]) {
                    document.querySelector('.loading-text').textContent = loadingTexts[textIndex];
                }
            }
            
            await this.delay(30);
        }
    }

    // –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    async authenticateUser() {
        try {
            const userData = {
                telegramId: this.tg?.initDataUnsafe?.user?.id || '12345',
                username: this.tg?.initDataUnsafe?.user?.username || 'TestUser',
                avatar: 'doomguy',
                first_name: this.tg?.initDataUnsafe?.user?.first_name || 'Test'
            };

            const response = await fetch('/api/auth/login', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify(userData)
            });

            const result = await response.json();
            
            if (result.success) {
                this.user = result.user;
                this.gameSession = result.gameSession;
                this.updatePlayerInfo();
                console.log('‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞:', this.user.username);
            } else {
                throw new Error(result.message);
            }
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:', error);
            // Fallback –∫ —Ç–µ—Å—Ç–æ–≤–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            this.user = { username: 'TestPlayer', level: 1, avatar: 'doomguy' };
            this.gameSession = { resources: { coffee: 100, motivation: 100, knowledge: 0 } };
        }
    }

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∏–≥—Ä–æ–∫–µ
    updatePlayerInfo() {
        if (this.user) {
            document.getElementById('player-name').textContent = this.user.username;
            document.getElementById('player-level').textContent = `–£—Ä–æ–≤–µ–Ω—å ${this.user.level}`;
        }
    }

    // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π
    setupEventListeners() {
        // –ö–Ω–æ–ø–∫–∏ –º–µ–Ω—é
        document.getElementById('start-game')?.addEventListener('click', () => this.startGame());
        document.getElementById('settings-btn')?.addEventListener('click', () => this.showSettings());
        document.getElementById('leaderboard-btn')?.addEventListener('click', () => this.showLeaderboard());
        
        // –ö–Ω–æ–ø–∫–∏ –ø–∞—É–∑—ã
        document.getElementById('resume-btn')?.addEventListener('click', () => this.resumeGame());
        document.getElementById('menu-btn')?.addEventListener('click', () => this.goToMenu());
        document.getElementById('restart-btn')?.addEventListener('click', () => this.restartGame());
        
        // –ù–∞—Å—Ç—Ä–æ–π–∫–∏
        document.getElementById('save-settings')?.addEventListener('click', () => this.saveSettings());
        document.getElementById('close-settings')?.addEventListener('click', () => this.closeSettings());
        
        // –î–∏–∞–ª–æ–≥–∏
        document.getElementById('dialogue-continue')?.addEventListener('click', () => this.continueDialogue());
        
        // –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞
        document.addEventListener('keydown', (e) => this.handleKeyDown(e));
        document.addEventListener('keyup', (e) => this.handleKeyUp(e));
        
        // –ú–æ–±–∏–ª—å–Ω—ã–µ –∫–æ–Ω—Ç—Ä–æ–ª–∏
        if (this.mobile) {
            this.setupMobileControls();
        }
        
        // –ö–Ω–æ–ø–∫–∞ Escape –¥–ª—è –ø–∞—É–∑—ã
        document.addEventListener('keydown', (e) => {
            if (e.key === 'Escape' && this.gameState === 'playing') {
                this.pauseGame();
            }
        });
    }

    // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –º–æ–±–∏–ª—å–Ω—ã—Ö –∫–æ–Ω—Ç—Ä–æ–ª–µ–π
    setupMobileControls() {
        const joystick = document.getElementById('movement-joystick');
        const shootBtn = document.getElementById('shoot-btn');
        const interactBtn = document.getElementById('interact-btn');
        const turnLeftBtn = document.getElementById('turn-left-btn');
        const turnRightBtn = document.getElementById('turn-right-btn');

        // –í–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π –¥–∂–æ–π—Å—Ç–∏–∫
        joystick?.addEventListener('touchstart', (e) => this.handleJoystickStart(e));
        joystick?.addEventListener('touchmove', (e) => this.handleJoystickMove(e));
        joystick?.addEventListener('touchend', (e) => this.handleJoystickEnd(e));

        // –ö–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π
        shootBtn?.addEventListener('touchstart', () => this.shoot());
        interactBtn?.addEventListener('touchstart', () => this.interact());
        turnLeftBtn?.addEventListener('touchstart', () => this.keys['ArrowLeft'] = true);
        turnLeftBtn?.addEventListener('touchend', () => this.keys['ArrowLeft'] = false);
        turnRightBtn?.addEventListener('touchstart', () => this.keys['ArrowRight'] = true);
        turnRightBtn?.addEventListener('touchend', () => this.keys['ArrowRight'] = false);
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∂–æ–π—Å—Ç–∏–∫–∞
    handleJoystickStart(e) {
        e.preventDefault();
        const rect = e.target.getBoundingClientRect();
        this.joystick.centerX = rect.left + rect.width / 2;
        this.joystick.centerY = rect.top + rect.height / 2;
        this.joystick.active = true;
    }

    handleJoystickMove(e) {
        if (!this.joystick.active) return;
        e.preventDefault();
        
        const touch = e.touches[0];
        const deltaX = touch.clientX - this.joystick.centerX;
        const deltaY = touch.clientY - this.joystick.centerY;
        const distance = Math.sqrt(deltaX * deltaX + deltaY * deltaY);
        const maxDistance = 40;
        
        if (distance <= maxDistance) {
            this.joystick.knobX = deltaX;
            this.joystick.knobY = deltaY;
        } else {
            this.joystick.knobX = (deltaX / distance) * maxDistance;
            this.joystick.knobY = (deltaY / distance) * maxDistance;
        }
        
        // –û–±–Ω–æ–≤–∏—Ç—å –≤–∏–∑—É–∞–ª—å–Ω–æ–µ –ø–æ–ª–æ–∂–µ–Ω–∏–µ
        const knob = document.querySelector('.joystick-knob');
        knob.style.transform = `translate(calc(-50% + ${this.joystick.knobX}px), calc(-50% + ${this.joystick.knobY}px))`;
        
        // –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∫–ª–∞–≤–∏—à–∏ –¥–≤–∏–∂–µ–Ω–∏—è
        this.keys['KeyW'] = this.joystick.knobY < -10;
        this.keys['KeyS'] = this.joystick.knobY > 10;
        this.keys['KeyA'] = this.joystick.knobX < -10;
        this.keys['KeyD'] = this.joystick.knobX > 10;
    }

    handleJoystickEnd(e) {
        e.preventDefault();
        this.joystick.active = false;
        this.joystick.knobX = 0;
        this.joystick.knobY = 0;
        
        // –°–±—Ä–æ—Å–∏—Ç—å –≤–∏–∑—É–∞–ª—å–Ω–æ–µ –ø–æ–ª–æ–∂–µ–Ω–∏–µ
        const knob = document.querySelector('.joystick-knob');
        knob.style.transform = 'translate(-50%, -50%)';
        
        // –û—á–∏—Å—Ç–∏—Ç—å –∫–ª–∞–≤–∏—à–∏ –¥–≤–∏–∂–µ–Ω–∏—è
        this.keys['KeyW'] = false;
        this.keys['KeyS'] = false;
        this.keys['KeyA'] = false;
        this.keys['KeyD'] = false;
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–ª–∞–≤–∏—à
    handleKeyDown(e) {
        this.keys[e.code] = true;
        
        // –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –∫–ª–∞–≤–∏—à–∏
        if (e.code === 'Space') {
            e.preventDefault();
            this.shoot();
        }
        if (e.code === 'KeyE' || e.code === 'Enter') {
            this.interact();
        }
    }

    handleKeyUp(e) {
        this.keys[e.code] = false;
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–æ–±–∏–ª—å–Ω–æ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
    isMobile() {
        return /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent);
    }

    // –ù–∞—á–∞—Ç—å –∏–≥—Ä—É
    async startGame() {
        console.log('üéÆ –ó–∞–ø—É—Å–∫ –∏–≥—Ä—ã...');
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä–æ–∫–∞
        console.log('üë§ –ò–≥—Ä–æ–∫ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω:', {
            position: `${this.player.x}, ${this.player.y}`,
            health: this.player.health,
            armor: this.player.armor,
            ammo: this.player.ammo
        });
        
        console.log('üëπ –í—Ä–∞–≥–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã:', this.enemies.map(e => 
            `${e.type} –≤ –ø–æ–∑–∏—Ü–∏–∏ ${e.x}, ${e.y} (HP: ${e.health})`
        ));
        
        this.gameState = 'playing';
        this.showScreen('game-screen');
        
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è canvas
        this.initCanvas();
        
        // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –º—ã—à—å—é –¥–ª—è –¥–µ—Å–∫—Ç–æ–ø–∞
        if (!this.mobile) {
            this.setupMouseControls();
        }
        
        // –ó–∞–ø—É—Å–∫ –∏–≥—Ä–æ–≤–æ–≥–æ —Ü–∏–∫–ª–∞
        this.startGameLoop();
        
        // –ü–æ–∫–∞–∑–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        this.showNotification('–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ nFactorial DOOM!', 'info');
    }

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è canvas
    initCanvas() {
        // –û—Å–Ω–æ–≤–Ω–æ–π canvas
        this.canvas = document.getElementById('doom-canvas');
        this.ctx = this.canvas.getContext('2d');
        
        // Minimap canvas
        this.minimapCanvas = document.getElementById('minimap-canvas');
        this.minimapCtx = this.minimapCanvas.getContext('2d');
        
        // –†–∞–∑–º–µ—Ä—ã
        this.resizeCanvas();
        window.addEventListener('resize', () => this.resizeCanvas());
        
        // –û—Ç–∫–ª—é—á–∏—Ç—å —Å–≥–ª–∞–∂–∏–≤–∞–Ω–∏–µ –¥–ª—è –ø–∏–∫—Å–µ–ª—å–Ω–æ–≥–æ —Å—Ç–∏–ª—è
        this.ctx.imageSmoothingEnabled = false;
        this.minimapCtx.imageSmoothingEnabled = false;
    }

    // –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞ canvas
    resizeCanvas() {
        if (this.canvas) {
            this.canvas.width = window.innerWidth;
            this.canvas.height = window.innerHeight;
        }
    }

    // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –º—ã—à—å—é
    setupMouseControls() {
        this.canvas.addEventListener('click', () => {
            this.canvas.requestPointerLock();
        });
        
        document.addEventListener('pointerlockchange', () => {
            this.mouse.locked = document.pointerLockElement === this.canvas;
        });
        
        document.addEventListener('mousemove', (e) => {
            if (this.mouse.locked && this.gameState === 'playing') {
                this.player.angle += e.movementX * this.mouse.sensitivity;
                
                // –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ —É–≥–ª–∞ –æ—Ç 0 –¥–æ 2œÄ
                if (this.player.angle < 0) this.player.angle += Math.PI * 2;
                if (this.player.angle >= Math.PI * 2) this.player.angle -= Math.PI * 2;
            }
        });
    }

    // –ó–∞–ø—É—Å–∫ –∏–≥—Ä–æ–≤–æ–≥–æ —Ü–∏–∫–ª–∞
    startGameLoop() {
        console.log('üéÆ –ó–∞–ø—É—Å–∫ –∏–≥—Ä–æ–≤–æ–≥–æ —Ü–∏–∫–ª–∞...');
        
        // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–µ—Ä–∂–∫—É –ø–µ—Ä–µ–¥ –Ω–∞—á–∞–ª–æ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π (–∑–∞—â–∏—Ç–∞ –æ—Ç –º–≥–Ω–æ–≤–µ–Ω–Ω–æ–≥–æ —É—Ä–æ–Ω–∞)
        let gameStarted = false;
        setTimeout(() => {
            gameStarted = true;
            console.log('‚úÖ –ò–≥—Ä–∞ –∞–∫—Ç–∏–≤–Ω–∞');
        }, 1000);
        
        const gameLoop = () => {
            if (this.gameState === 'playing' && gameStarted) {
                this.update();
                this.render();
            } else if (this.gameState === 'playing') {
                // –¢–æ–ª—å–∫–æ —Ä–µ–Ω–¥–µ—Ä –≤ –ø–µ—Ä–≤—É—é —Å–µ–∫—É–Ω–¥—É
                this.render();
            }
            requestAnimationFrame(gameLoop);
        };
        gameLoop();
    }

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–≥—Ä–æ–≤–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    update() {
        this.updatePlayer();
        this.updateEnemies();
        this.checkCollisions();
        this.checkInteractions();
    }

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–≥—Ä–æ–∫–∞
    updatePlayer() {
        let moveX = 0;
        let moveY = 0;
        
        // –î–≤–∏–∂–µ–Ω–∏–µ –≤–ø–µ—Ä–µ–¥/–Ω–∞–∑–∞–¥
        if (this.keys['KeyW']) {
            moveX += Math.cos(this.player.angle) * this.player.moveSpeed;
            moveY += Math.sin(this.player.angle) * this.player.moveSpeed;
        }
        if (this.keys['KeyS']) {
            moveX -= Math.cos(this.player.angle) * this.player.moveSpeed;
            moveY -= Math.sin(this.player.angle) * this.player.moveSpeed;
        }
        
        // –î–≤–∏–∂–µ–Ω–∏–µ –≤–ª–µ–≤–æ/–≤–ø—Ä–∞–≤–æ (—Å—Ç—Ä–µ–π—Ñ)
        if (this.keys['KeyA']) {
            moveX += Math.cos(this.player.angle - Math.PI/2) * this.player.moveSpeed;
            moveY += Math.sin(this.player.angle - Math.PI/2) * this.player.moveSpeed;
        }
        if (this.keys['KeyD']) {
            moveX += Math.cos(this.player.angle + Math.PI/2) * this.player.moveSpeed;
            moveY += Math.sin(this.player.angle + Math.PI/2) * this.player.moveSpeed;
        }
        
        // –ü–æ–≤–æ—Ä–æ—Ç (–∫–ª–∞–≤–∏—à–∏ —Å—Ç—Ä–µ–ª–æ–∫)
        if (this.keys['ArrowLeft']) {
            this.player.angle -= this.player.turnSpeed;
        }
        if (this.keys['ArrowRight']) {
            this.player.angle += this.player.turnSpeed;
        }
        
        // –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ —É–≥–ª–∞
        if (this.player.angle < 0) this.player.angle += Math.PI * 2;
        if (this.player.angle >= Math.PI * 2) this.player.angle -= Math.PI * 2;
        
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–ª–ª–∏–∑–∏–π –∏ –¥–≤–∏–∂–µ–Ω–∏–µ
        const newX = this.player.x + moveX;
        const newY = this.player.y + moveY;
        
        if (!this.isWall(Math.floor(newX), Math.floor(this.player.y))) {
            this.player.x = newX;
        }
        if (!this.isWall(Math.floor(this.player.x), Math.floor(newY))) {
            this.player.y = newY;
        }
    }

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—Ä–∞–≥–æ–≤
    updateEnemies() {
        this.enemies.forEach(enemy => {
            if (enemy.health <= 0) return;
            
            // –ü—Ä–æ—Å—Ç–∞—è –ò–ò: –¥–≤–∏–∂–µ–Ω–∏–µ –∫ –∏–≥—Ä–æ–∫—É —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –±–ª–∏–∑–∫–æ
            const dx = this.player.x - enemy.x;
            const dy = this.player.y - enemy.y;
            const distance = Math.sqrt(dx * dx + dy * dy);
            
            // –í—Ä–∞–≥–∏ –Ω–∞—á–∏–Ω–∞—é—Ç –ø—Ä–µ—Å–ª–µ–¥–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ —Å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–≥–æ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è
            const activationDistance = enemy.type === 'deadline' ? 4 : 3;
            const attackDistance = 0.8; // –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –∞—Ç–∞–∫–∏
            
            if (distance > attackDistance && distance < activationDistance) {
                const moveSpeed = enemy.type === 'deadline' ? 0.015 : 0.01;
                const moveX = (dx / distance) * moveSpeed;
                const moveY = (dy / distance) * moveSpeed;
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–ª–∏–∑–∏–∏ —Å–æ —Å—Ç–µ–Ω–∞–º–∏ –ø–µ—Ä–µ–¥ –¥–≤–∏–∂–µ–Ω–∏–µ–º
                const newX = enemy.x + moveX;
                const newY = enemy.y + moveY;
                
                if (!this.isWall(Math.floor(newX), Math.floor(enemy.y))) {
                    enemy.x = newX;
                }
                if (!this.isWall(Math.floor(enemy.x), Math.floor(newY))) {
                    enemy.y = newY;
                }
            }
        });
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–ª–ª–∏–∑–∏–π
    checkCollisions() {
        const currentTime = Date.now();
        
        // –ö–æ–ª–ª–∏–∑–∏–∏ —Å –≤—Ä–∞–≥–∞–º–∏
        this.enemies.forEach(enemy => {
            if (enemy.health <= 0) return;
            
            const dx = this.player.x - enemy.x;
            const dy = this.player.y - enemy.y;
            const distance = Math.sqrt(dx * dx + dy * dy);
            
            if (distance < 0.5) {
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—É–ª–¥–∞—É–Ω –∞—Ç–∞–∫–∏ (1 —Å–µ–∫—É–Ω–¥–∞)
                if (currentTime - enemy.lastAttack > 1000) {
                    const damage = enemy.type === 'deadline' ? 10 : 5;
                    console.log(`üí• ${enemy.type} –∞—Ç–∞–∫—É–µ—Ç! –£—Ä–æ–Ω: ${damage}, HP –±—ã–ª–æ: ${this.player.health}`);
                    this.player.health -= damage;
                    enemy.lastAttack = currentTime;
                    console.log(`‚ù§Ô∏è HP —Å—Ç–∞–ª–æ: ${this.player.health}`);
                    this.showNotification(`–ü–æ–ª—É—á–µ–Ω —É—Ä–æ–Ω: ${damage}`, 'damage');
                    
                    if (this.player.health <= 0) {
                        console.log('üíÄ –ò–≥—Ä–æ–∫ –ø–æ–≥–∏–±!');
                        this.gameOver();
                        return;
                    }
                }
                
                // –û—Ç—Ç–∞–ª–∫–∏–≤–∞–Ω–∏–µ
                const pushDistance = 0.3;
                enemy.x -= (dx / distance) * pushDistance;
                enemy.y -= (dy / distance) * pushDistance;
            }
        });
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–π
    checkInteractions() {
        // –°–±–æ—Ä –ø—Ä–µ–¥–º–µ—Ç–æ–≤
        this.items = this.items.filter(item => {
            const dx = this.player.x - item.x;
            const dy = this.player.y - item.y;
            const distance = Math.sqrt(dx * dx + dy * dy);
            
            if (distance < 0.5) {
                this.collectItem(item);
                return false; // –£–¥–∞–ª–∏—Ç—å –ø—Ä–µ–¥–º–µ—Ç
            }
            return true;
        });
    }

    // –°–±–æ—Ä –ø—Ä–µ–¥–º–µ—Ç–∞
    collectItem(item) {
        switch (item.type) {
            case 'coffee':
                this.player.health = Math.min(100, this.player.health + item.value);
                this.showNotification(`+${item.value} –∑–¥–æ—Ä–æ–≤—å—è ‚òï`, 'success');
                break;
            case 'knowledge':
                this.player.ammo = Math.min(100, this.player.ammo + item.value);
                this.showNotification(`+${item.value} –ø–∞—Ç—Ä–æ–Ω–æ–≤ üìö`, 'success');
                break;
            case 'motivation':
                this.player.armor = Math.min(100, this.player.armor + item.value);
                this.showNotification(`+${item.value} –±—Ä–æ–Ω–∏ üí™`, 'success');
                break;
        }
        
        this.updateHUD();
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–µ–Ω—ã
    isWall(x, y) {
        if (x < 0 || x >= this.worldMap[0].length || y < 0 || y >= this.worldMap.length) {
            return true;
        }
        return this.worldMap[y][x] === 1;
    }

    // –°—Ç—Ä–µ–ª—å–±–∞
    shoot() {
        if (this.player.ammo <= 0) {
            this.showNotification('–ù–µ—Ç –ø–∞—Ç—Ä–æ–Ω–æ–≤!', 'warning');
            return;
        }
        
        this.player.ammo--;
        this.updateHUD();
        
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ø–∞–¥–∞–Ω–∏—è –≤ –≤—Ä–∞–≥–æ–≤
        this.enemies.forEach(enemy => {
            if (enemy.health <= 0) return;
            
            const dx = enemy.x - this.player.x;
            const dy = enemy.y - this.player.y;
            const distance = Math.sqrt(dx * dx + dy * dy);
            const angle = Math.atan2(dy, dx);
            
            // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤—ã—Å—Ç—Ä–µ–ª–∞
            let angleDiff = Math.abs(angle - this.player.angle);
            if (angleDiff > Math.PI) angleDiff = Math.PI * 2 - angleDiff;
            
            if (distance < 5 && angleDiff < 0.3) {
                const damage = 25;
                enemy.health -= damage;
                this.showNotification(`–ü–æ–ø–∞–¥–∞–Ω–∏–µ! -${damage} HP`, 'success');
                
                if (enemy.health <= 0) {
                    this.showNotification(`${enemy.type === 'bug' ? '–ë–∞–≥' : '–î–µ–¥–ª–∞–π–Ω'} —É–Ω–∏—á—Ç–æ–∂–µ–Ω!`, 'success');
                }
            }
        });
    }

    // –í–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ
    interact() {
        // –ü–æ–∏—Å–∫ –±–ª–∏–∂–∞–π—à–µ–≥–æ –ù–ü–°
        let nearestNPC = null;
        let minDistance = Infinity;
        
        this.npcs.forEach(npc => {
            const dx = npc.x - this.player.x;
            const dy = npc.y - this.player.y;
            const distance = Math.sqrt(dx * dx + dy * dy);
            
            if (distance < 1.5 && distance < minDistance) {
                minDistance = distance;
                nearestNPC = npc;
            }
        });
        
        if (nearestNPC) {
            this.startDialogue(nearestNPC);
        }
    }

    // –ù–∞—á–∞—Ç—å –¥–∏–∞–ª–æ–≥
    startDialogue(npc) {
        this.dialogue.active = true;
        this.dialogue.npc = npc;
        this.dialogue.messageIndex = 0;
        
        this.showDialogue();
    }

    // –ü–æ–∫–∞–∑–∞—Ç—å –¥–∏–∞–ª–æ–≥
    showDialogue() {
        const dialogueBox = document.getElementById('dialogue-box');
        const npcName = document.getElementById('npc-name');
        const dialogueMessage = document.getElementById('dialogue-message');
        const npcAvatar = document.getElementById('npc-avatar');
        
        const npc = this.dialogue.npc;
        const message = npc.dialogue[this.dialogue.messageIndex];
        
        npcName.textContent = npc.name;
        dialogueMessage.textContent = message;
        npcAvatar.textContent = npc.sprite;
        
        dialogueBox.classList.add('active');
    }

    // –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –¥–∏–∞–ª–æ–≥
    continueDialogue() {
        this.dialogue.messageIndex++;
        
        if (this.dialogue.messageIndex >= this.dialogue.npc.dialogue.length) {
            this.endDialogue();
        } else {
            this.showDialogue();
        }
    }

    // –ó–∞–∫–æ–Ω—á–∏—Ç—å –¥–∏–∞–ª–æ–≥
    endDialogue() {
        this.dialogue.active = false;
        this.dialogue.npc = null;
        this.dialogue.messageIndex = 0;
        
        document.getElementById('dialogue-box').classList.remove('active');
    }

    // –†–µ–Ω–¥–µ—Ä–∏–Ω–≥
    render() {
        this.renderWorld();
        this.renderSprites();
        this.renderMinimap();
        this.updateHUD();
    }

    // –†–µ–Ω–¥–µ—Ä–∏–Ω–≥ –º–∏—Ä–∞ (raycasting)
    renderWorld() {
        const width = this.canvas.width;
        const height = this.canvas.height;
        
        // –û—á–∏—Å—Ç–∫–∞ canvas
        this.ctx.fillStyle = '#222';
        this.ctx.fillRect(0, 0, width, height);
        
        // –†–µ–Ω–¥–µ—Ä –Ω–µ–±–∞ –∏ –ø–æ–ª–∞
        this.ctx.fillStyle = '#333';
        this.ctx.fillRect(0, 0, width, height / 2);
        this.ctx.fillStyle = '#111';
        this.ctx.fillRect(0, height / 2, width, height / 2);
        
        // Raycasting
        const rayAngleStep = this.fov / this.rayCount;
        const startAngle = this.player.angle - this.fov / 2;
        
        for (let i = 0; i < this.rayCount; i++) {
            const rayAngle = startAngle + i * rayAngleStep;
            const rayData = this.castRay(rayAngle);
            
            // –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ fish-eye —ç—Ñ—Ñ–µ–∫—Ç–∞
            const distance = rayData.distance * Math.cos(rayAngle - this.player.angle);
            
            // –í—ã—Å–æ—Ç–∞ —Å—Ç–µ–Ω—ã –Ω–∞ —ç–∫—Ä–∞–Ω–µ
            const wallHeight = (height / distance) * 0.5;
            const wallTop = (height - wallHeight) / 2;
            
            // –û—Å–≤–µ—â–µ–Ω–∏–µ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è
            const brightness = Math.max(0.1, 1 - distance / this.maxDistance);
            const color = Math.floor(brightness * 255);
            
            // –¶–≤–µ—Ç —Å—Ç–µ–Ω—ã
            this.ctx.fillStyle = `rgb(${color}, ${Math.floor(color * 0.8)}, ${Math.floor(color * 0.6)})`;
            
            // –†–∏—Å—É–µ–º —Å—Ç–µ–Ω—É
            const rayWidth = width / this.rayCount;
            this.ctx.fillRect(i * rayWidth, wallTop, rayWidth + 1, wallHeight);
        }
    }

    // –ü—É—Å–∫–∞–Ω–∏–µ –ª—É—á–∞
    castRay(angle) {
        let distance = 0;
        const step = 0.02;
        
        while (distance < this.maxDistance) {
            const testX = this.player.x + Math.cos(angle) * distance;
            const testY = this.player.y + Math.sin(angle) * distance;
            
            if (this.isWall(Math.floor(testX), Math.floor(testY))) {
                return { distance, x: testX, y: testY };
            }
            
            distance += step;
        }
        
        return { distance: this.maxDistance, x: 0, y: 0 };
    }

    // –†–µ–Ω–¥–µ—Ä–∏–Ω–≥ —Å–ø—Ä–∞–π—Ç–æ–≤
    renderSprites() {
        const sprites = [
            ...this.npcs.map(npc => ({ ...npc, type: 'npc' })),
            ...this.enemies.filter(enemy => enemy.health > 0).map(enemy => ({ ...enemy, type: 'enemy' })),
            ...this.items.map(item => ({ ...item, type: 'item' }))
        ];
        
        // –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—é (–¥–∞–ª—å–Ω–∏–µ –ø–µ—Ä–≤—ã–º–∏)
        sprites.sort((a, b) => {
            const distA = Math.sqrt((a.x - this.player.x) ** 2 + (a.y - this.player.y) ** 2);
            const distB = Math.sqrt((b.x - this.player.x) ** 2 + (b.y - this.player.y) ** 2);
            return distB - distA;
        });
        
        sprites.forEach(sprite => this.renderSprite(sprite));
    }

    // –†–µ–Ω–¥–µ—Ä–∏–Ω–≥ –æ–¥–Ω–æ–≥–æ —Å–ø—Ä–∞–π—Ç–∞
    renderSprite(sprite) {
        const dx = sprite.x - this.player.x;
        const dy = sprite.y - this.player.y;
        const distance = Math.sqrt(dx * dx + dy * dy);
        
        if (distance > this.maxDistance) return;
        
        // –£–≥–æ–ª –∫ —Å–ø—Ä–∞–π—Ç—É
        const angle = Math.atan2(dy, dx);
        let angleDiff = angle - this.player.angle;
        
        // –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è —É–≥–ª–∞
        if (angleDiff > Math.PI) angleDiff -= Math.PI * 2;
        if (angleDiff < -Math.PI) angleDiff += Math.PI * 2;
        
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∏–¥–∏–º–æ—Å—Ç–∏
        if (Math.abs(angleDiff) > this.fov / 2) return;
        
        // –ü–æ–∑–∏—Ü–∏—è –Ω–∞ —ç–∫—Ä–∞–Ω–µ
        const screenX = (this.canvas.width / 2) + (angleDiff / this.fov) * this.canvas.width;
        const spriteSize = (this.canvas.height / distance) * 0.3;
        const screenY = (this.canvas.height / 2) - spriteSize / 2;
        
        // –†–µ–Ω–¥–µ—Ä —Å–ø—Ä–∞–π—Ç–∞ –∫–∞–∫ —Ç–µ–∫—Å—Ç
        this.ctx.font = `${spriteSize}px Arial`;
        this.ctx.textAlign = 'center';
        this.ctx.fillStyle = distance > 3 ? '#888' : '#fff';
        this.ctx.fillText(sprite.sprite, screenX, screenY + spriteSize);
    }

    // –†–µ–Ω–¥–µ—Ä–∏–Ω–≥ –º–∏–Ω–∏-–∫–∞—Ä—Ç—ã
    renderMinimap() {
        const size = 120;
        const scale = size / 16;
        
        // –û—á–∏—Å—Ç–∫–∞
        this.minimapCtx.fillStyle = '#000';
        this.minimapCtx.fillRect(0, 0, size, size);
        
        // –†–µ–Ω–¥–µ—Ä –∫–∞—Ä—Ç—ã
        for (let y = 0; y < this.worldMap.length; y++) {
            for (let x = 0; x < this.worldMap[y].length; x++) {
                if (this.worldMap[y][x] === 1) {
                    this.minimapCtx.fillStyle = '#666';
                    this.minimapCtx.fillRect(x * scale, y * scale, scale, scale);
                }
            }
        }
        
        // –†–µ–Ω–¥–µ—Ä –∏–≥—Ä–æ–∫–∞
        this.minimapCtx.fillStyle = '#0f0';
        this.minimapCtx.fillRect(
            this.player.x * scale - 2,
            this.player.y * scale - 2,
            4, 4
        );
        
        // –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤–∑–≥–ª—è–¥–∞
        this.minimapCtx.strokeStyle = '#0f0';
        this.minimapCtx.lineWidth = 2;
        this.minimapCtx.beginPath();
        this.minimapCtx.moveTo(this.player.x * scale, this.player.y * scale);
        this.minimapCtx.lineTo(
            this.player.x * scale + Math.cos(this.player.angle) * 15,
            this.player.y * scale + Math.sin(this.player.angle) * 15
        );
        this.minimapCtx.stroke();
        
        // –í—Ä–∞–≥–∏–∏ –ù–ü–°
        [...this.npcs, ...this.enemies, ...this.items].forEach(entity => {
            this.minimapCtx.fillStyle = entity.type === 'enemy' ? '#f00' : 
                                       entity.type === 'npc' ? '#ff0' : '#0ff';
            this.minimapCtx.fillRect(
                entity.x * scale - 1,
                entity.y * scale - 1,
                2, 2
            );
        });
    }

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ HUD
    updateHUD() {
        // –ó–¥–æ—Ä–æ–≤—å–µ
        document.getElementById('health-value').textContent = Math.floor(this.player.health);
        document.getElementById('health-fill').style.width = this.player.health + '%';
        
        // –ë—Ä–æ–Ω—è
        document.getElementById('armor-value').textContent = Math.floor(this.player.armor);
        document.getElementById('armor-fill').style.width = this.player.armor + '%';
        
        // –ü–∞—Ç—Ä–æ–Ω—ã
        document.getElementById('ammo-value').textContent = Math.floor(this.player.ammo);
        document.getElementById('ammo-fill').style.width = (this.player.ammo / 100) * 100 + '%';
    }

    // –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ —ç–∫—Ä–∞–Ω–æ–≤
    showScreen(screenId) {
        document.querySelectorAll('.screen').forEach(screen => {
            screen.classList.remove('active');
        });
        document.getElementById(screenId)?.classList.add('active');
    }

    showNotification(message, type = 'info') {
        const notification = document.createElement('div');
        notification.className = `notification ${type}`;
        notification.textContent = message;
        
        document.getElementById('notifications').appendChild(notification);
        
        setTimeout(() => {
            notification.remove();
        }, 3000);
    }

    pauseGame() {
        this.gameState = 'paused';
        this.showScreen('pause-screen');
    }

    resumeGame() {
        this.gameState = 'playing';
        this.showScreen('game-screen');
    }

    goToMenu() {
        this.gameState = 'menu';
        this.showScreen('menu-screen');
    }

    restartGame() {
        // –°–±—Ä–æ—Å –∏–≥—Ä–æ–∫–∞
        this.player = {
            x: 8.5, y: 8.5, angle: 0,
            health: 100, armor: 100, ammo: 50,
            moveSpeed: 0.05, turnSpeed: 0.03
        };
        
        // –°–±—Ä–æ—Å –≤—Ä–∞–≥–æ–≤ - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –Ω–∞ –∏—Å—Ö–æ–¥–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–∏
        this.enemies = [
            { id: 'bug1', type: 'bug', x: 3, y: 3, health: 30, sprite: 'üêõ', lastAttack: 0 },
            { id: 'deadline1', type: 'deadline', x: 13, y: 13, health: 50, sprite: '‚è∞', lastAttack: 0 }
        ];
        
        // –°–±—Ä–æ—Å –ø—Ä–µ–¥–º–µ—Ç–æ–≤
        this.items = [
            { id: 'coffee1', type: 'coffee', x: 2, y: 8, sprite: '‚òï', value: 25 },
            { id: 'book1', type: 'knowledge', x: 14, y: 2, sprite: 'üìö', value: 10 },
            { id: 'energy1', type: 'motivation', x: 2, y: 12, sprite: 'üí™', value: 20 }
        ];
        
        // –°–±—Ä–æ—Å –¥–∏–∞–ª–æ–≥–æ–≤
        this.dialogue = { active: false, npc: null, messageIndex: 0 };
        
        // –û–±–Ω–æ–≤–ª—è–µ–º HUD
        this.updateHUD();
        
        this.resumeGame();
    }

    gameOver() {
        alert('–ò–≥—Ä–∞ –æ–∫–æ–Ω—á–µ–Ω–∞! –¢–µ–±—è –æ–¥–æ–ª–µ–ª–∏ –±–∞–≥–∏ –∏ –¥–µ–¥–ª–∞–π–Ω—ã...');
        this.goToMenu();
    }

    showSettings() {
        this.showScreen('settings-screen');
    }

    closeSettings() {
        this.showScreen('menu-screen');
    }

    saveSettings() {
        // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫
        console.log('–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã');
        this.closeSettings();
    }

    showLeaderboard() {
        alert('–õ–∏–¥–µ—Ä–±–æ—Ä–¥ –ø–æ–∫–∞ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ!');
    }

    delay(ms) {
        return new Promise(resolve => setTimeout(resolve, ms));
    }
}

// –ó–∞–ø—É—Å–∫ –∏–≥—Ä—ã
document.addEventListener('DOMContentLoaded', () => {
    console.log('üöÄ –ó–∞–ø—É—Å–∫ nFactorial DOOM...');
    window.game = new NFactorialDoom();
}); 