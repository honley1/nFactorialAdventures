// nFactorial Adventures - First Person View Game
console.log('üéÆ nFactorial Adventures Loading...');

// Telegram Web App –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
let tg = window.Telegram?.WebApp;
let user = null;
let gameState = null;
let gameCanvas = null;
let gameContext = null;

// ===== FIRST PERSON GAME STATE =====
let currentLocation = 'classroom';
let gameResources = {
    coffee: 100,
    motivation: 100,
    knowledge: 0,
    sleep: 100
};

let gameStats = {
    week: 1,
    day: 1,
    timeOfDay: 'morning',
    totalScore: 0,
    level: 1,
    projectsCompleted: 0,
    mentorInteractions: 0,
    coffeeConsumed: 0
};

let currentMessage = null;
let messageTimer = 0;
let animationId = null;
let interactiveObjects = [];

// ===== LOCATIONS & SCENES =====
const gameLocations = {
    classroom: {
        name: '–£—á–µ–±–Ω—ã–π –∫–ª–∞—Å—Å nFactorial',
        description: '–°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π –∫–ª–∞—Å—Å —Å –±–æ–ª—å—à–∏–º–∏ —ç–∫—Ä–∞–Ω–∞–º–∏ –∏ —É–¥–æ–±–Ω—ã–º–∏ —Å—Ç–æ–ª–∞–º–∏. –ó–¥–µ—Å—å –ø—Ä–æ—Ö–æ–¥—è—Ç –ª–µ–∫—Ü–∏–∏ –∏ –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ –∑–∞–Ω—è—Ç–∏—è.',
        background: 'classroom_bg',
        objects: [
            {
                id: 'coffee_machine',
                name: '–ö–æ—Ñ–µ-–º–∞—à–∏–Ω–∞ ‚òï',
                type: 'coffee_machine',
                x: 15, y: 45, width: 25, height: 35,
                description: '–ù–∞—Å—Ç–æ—è—â–µ–µ —Å–ø–∞—Å–µ–Ω–∏–µ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤. –í—Å–µ–≥–¥–∞ –≥–æ—Ç–æ–≤–∞ –ø–æ–¥–µ–ª–∏—Ç—å—Å—è –±–æ–¥—Ä—è—â–∏–º –Ω–∞–ø–∏—Ç–∫–æ–º.',
                action: 'use_coffee'
            },
            {
                id: 'computer_lab',
                name: '–†–∞–±–æ—á–∏–µ —Å—Ç–∞–Ω—Ü–∏–∏ üíª',
                type: 'computer',
                x: 40, y: 35, width: 30, height: 25,
                description: '–ú–æ—â–Ω—ã–µ –∫–æ–º–ø—å—é—Ç–µ—Ä—ã –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏. –ó–¥–µ—Å—å —Ä–æ–∂–¥–∞–µ—Ç—Å—è –∫–æ–¥.',
                action: 'use_computer'
            },
            {
                id: 'mentor_desk',
                name: '–ú–µ–Ω—Ç–æ—Ä üë®‚Äçüè´',
                type: 'mentor',
                x: 70, y: 30, width: 20, height: 40,
                description: '–û–ø—ã—Ç–Ω—ã–π –º–µ–Ω—Ç–æ—Ä –≤—Å–µ–≥–¥–∞ –≥–æ—Ç–æ–≤ –ø–æ–º–æ—á—å —Å –≤–æ–ø—Ä–æ—Å–∞–º–∏ –∏ –¥–∞—Ç—å —Ü–µ–Ω–Ω—ã–π —Å–æ–≤–µ—Ç.',
                action: 'talk_to_mentor'
            },
            {
                id: 'whiteboard',
                name: '–î–æ—Å–∫–∞ —Å –∑–∞–¥–∞–Ω–∏—è–º–∏ üìã',
                type: 'board',
                x: 30, y: 15, width: 40, height: 20,
                description: '–ù–∞ –¥–æ—Å–∫–µ –Ω–∞–ø–∏—Å–∞–Ω—ã –∑–∞–¥–∞–Ω–∏—è –Ω–∞ —Å–µ–≥–æ–¥–Ω—è –∏ –≤–∞–∂–Ω—ã–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è.',
                action: 'check_assignments'
            }
        ],
        exits: [
            { name: '–ö–æ–≤–æ—Ä–∫–∏–Ω–≥', direction: 'right', target: 'coworking' },
            { name: '–•–æ–ª–ª', direction: 'back', target: 'lobby' }
        ]
    },
    
    coworking: {
        name: '–ö–æ–≤–æ—Ä–∫–∏–Ω–≥ –∑–æ–Ω–∞',
        description: '–û—Ç–∫—Ä—ã—Ç–æ–µ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ –¥–ª—è —Ä–∞–±–æ—Ç—ã –Ω–∞–¥ –ø—Ä–æ–µ–∫—Ç–∞–º–∏. –ó–¥–µ—Å—å —Å—Ç—É–¥–µ–Ω—Ç—ã –æ–±—ä–µ–¥–∏–Ω—è—é—Ç—Å—è –≤ –∫–æ–º–∞–Ω–¥—ã.',
        background: 'coworking_bg',
        objects: [
            {
                id: 'project_board',
                name: '–î–æ—Å–∫–∞ –ø—Ä–æ–µ–∫—Ç–æ–≤ üöÄ',
                type: 'project_board',
                x: 20, y: 25, width: 35, height: 30,
                description: '–ó–¥–µ—Å—å –º–æ–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å –ø—Ä–æ–µ–∫—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã –∏–ª–∏ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å –∫–æ–º–∞–Ω–¥—ã.',
                action: 'manage_projects'
            },
            {
                id: 'coffee_corner',
                name: '–ö–æ—Ñ–µ-–∫–æ—Ä–Ω–µ—Ä ‚òï',
                type: 'coffee_machine',
                x: 75, y: 50, width: 20, height: 30,
                description: '–ï—â–µ –æ–¥–Ω–∞ –∫–æ—Ñ–µ-–º–∞—à–∏–Ω–∞ –¥–ª—è —Ç–µ—Ö, –∫—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç –¥–æ–ø–æ–∑–¥–Ω–∞.',
                action: 'use_coffee'
            },
            {
                id: 'team_table',
                name: '–°—Ç–æ–ª –¥–ª—è –∫–æ–º–∞–Ω–¥—ã üë•',
                type: 'table',
                x: 45, y: 45, width: 25, height: 20,
                description: '–ú–µ—Å—Ç–æ –¥–ª—è –≤—Å—Ç—Ä–µ—á –∫–æ–º–∞–Ω–¥—ã –∏ –æ–±—Å—É–∂–¥–µ–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–æ–≤.',
                action: 'team_meeting'
            }
        ],
        exits: [
            { name: '–£—á–µ–±–Ω—ã–π –∫–ª–∞—Å—Å', direction: 'left', target: 'classroom' },
            { name: '–ö–∞—Ñ–µ', direction: 'forward', target: 'cafe' }
        ]
    },
    
    lobby: {
        name: '–ì–ª–∞–≤–Ω—ã–π —Ö–æ–ª–ª nFactorial',
        description: '–ü—Ä–æ—Å—Ç–æ—Ä–Ω—ã–π —Ö–æ–ª–ª —Å –ª–æ–≥–æ—Ç–∏–ø–æ–º nFactorial. –ó–¥–µ—Å—å –ø—Ä–æ—Ö–æ–¥—è—Ç –≤–∞–∂–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è –∏ –≤—Å—Ç—Ä–µ—á–∏.',
        background: 'lobby_bg',
        objects: [
            {
                id: 'nfactorial_logo',
                name: '–õ–æ–≥–æ—Ç–∏–ø nFactorial üè¢',
                type: 'decoration',
                x: 35, y: 20, width: 30, height: 25,
                description: '–ì–æ—Ä–¥–æ—Å—Ç—å —à–∫–æ–ª—ã - —Å–≤–µ—Ç—è—â–∏–π—Å—è –ª–æ–≥–æ—Ç–∏–ø nFactorial.',
                action: 'admire_logo'
            },
            {
                id: 'announcement_board',
                name: '–î–æ—Å–∫–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏–π üì¢',
                type: 'board',
                x: 15, y: 35, width: 25, height: 35,
                description: '–í–∞–∂–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏, –æ–±—ä—è–≤–ª–µ–Ω–∏—è –æ —Ö–∞–∫–∞—Ç–æ–Ω–∞—Ö –∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è—Ö.',
                action: 'read_announcements'
            },
            {
                id: 'reception',
                name: '–†–µ—Å–µ–ø—à–Ω üíº',
                type: 'reception',
                x: 65, y: 45, width: 30, height: 25,
                description: '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏—è —à–∫–æ–ª—ã. –ó–¥–µ—Å—å –º–æ–∂–Ω–æ —Ä–µ—à–∏—Ç—å –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–æ–Ω–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã.',
                action: 'visit_reception'
            }
        ],
        exits: [
            { name: '–£—á–µ–±–Ω—ã–π –∫–ª–∞—Å—Å', direction: 'forward', target: 'classroom' },
            { name: '–ö–∞—Ñ–µ', direction: 'right', target: 'cafe' }
        ]
    },
    
    cafe: {
        name: '–ö–∞—Ñ–µ nFactorial',
        description: '–£—é—Ç–Ω–æ–µ –∫–∞—Ñ–µ –¥–ª—è –æ—Ç–¥—ã—Ö–∞ –∏ –Ω–µ—Ñ–æ—Ä–º–∞–ª—å–Ω–æ–≥–æ –æ–±—â–µ–Ω–∏—è. –ú–µ—Å—Ç–æ —Å–∏–ª—ã –¥–ª—è —Å—Ç—É–¥–µ–Ω—Ç–æ–≤.',
        background: 'cafe_bg',
        objects: [
            {
                id: 'food_counter',
                name: '–°—Ç–æ–π–∫–∞ —Å –µ–¥–æ–π üçï',
                type: 'food',
                x: 25, y: 40, width: 30, height: 25,
                description: '–í–∫—É—Å–Ω–∞—è –µ–¥–∞ –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è —Å–∏–ª –∏ —ç–Ω–µ—Ä–≥–∏–∏.',
                action: 'buy_food'
            },
            {
                id: 'chill_zone',
                name: '–ó–æ–Ω–∞ –æ—Ç–¥—ã—Ö–∞ üõãÔ∏è',
                type: 'rest',
                x: 60, y: 50, width: 25, height: 30,
                description: '–£–¥–æ–±–Ω—ã–µ –¥–∏–≤–∞–Ω—ã –¥–ª—è –æ—Ç–¥—ã—Ö–∞ –∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è —Å–Ω–∞.',
                action: 'take_rest'
            },
            {
                id: 'networking_area',
                name: '–ó–æ–Ω–∞ –Ω–µ—Ç–≤–æ—Ä–∫–∏–Ω–≥–∞ ü§ù',
                type: 'social',
                x: 40, y: 25, width: 35, height: 20,
                description: '–ú–µ—Å—Ç–æ –¥–ª—è –∑–Ω–∞–∫–æ–º—Å—Ç–≤ —Å –¥—Ä—É–≥–∏–º–∏ —Å—Ç—É–¥–µ–Ω—Ç–∞–º–∏ –∏ –≤—ã–ø—É—Å–∫–Ω–∏–∫–∞–º–∏.',
                action: 'network'
            }
        ],
        exits: [
            { name: '–ö–æ–≤–æ—Ä–∫–∏–Ω–≥', direction: 'back', target: 'coworking' },
            { name: '–•–æ–ª–ª', direction: 'left', target: 'lobby' }
        ]
    }
};

// ===== GAME BACKGROUNDS =====
const backgrounds = {
    classroom_bg: {
        sky: '#87CEEB',
        wall: '#f8f9fa',
        floor: '#495057',
        elements: [
            { type: 'window', x: 5, y: 10, width: 20, height: 25 },
            { type: 'projector_screen', x: 25, y: 5, width: 50, height: 30 }
        ]
    },
    coworking_bg: {
        sky: '#87CEEB',
        wall: '#e9ecef',
        floor: '#6c757d',
        elements: [
            { type: 'plants', x: 10, y: 60, width: 15, height: 20 },
            { type: 'modern_lights', x: 0, y: 0, width: 100, height: 15 }
        ]
    },
    lobby_bg: {
        sky: '#87CEEB',
        wall: '#ffffff',
        floor: '#343a40',
        elements: [
            { type: 'marble_pillars', x: 5, y: 20, width: 10, height: 60 },
            { type: 'marble_pillars', x: 85, y: 20, width: 10, height: 60 },
            { type: 'chandelier', x: 40, y: 5, width: 20, height: 15 }
        ]
    },
    cafe_bg: {
        sky: '#87CEEB',
        wall: '#fff3cd',
        floor: '#8d5524',
        elements: [
            { type: 'cafe_lights', x: 0, y: 0, width: 100, height: 10 },
            { type: 'cafe_decor', x: 75, y: 15, width: 20, height: 30 }
        ]
    }
};

// ===== CORE GAME FUNCTIONS =====

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–≥—Ä—ã
function initGame() {
    console.log('üéØ Initializing First Person Game...');
    
    gameCanvas = document.getElementById('game-canvas');
    gameContext = gameCanvas.getContext('2d');
    
    // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ä–∞–∑–º–µ—Ä–æ–≤ canvas
    resizeCanvas();
    window.addEventListener('resize', resizeCanvas);
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
    setupEventListeners();
    setupInteractiveObjects();
    
    // –ó–∞–ø—É—Å–∫ –∏–≥—Ä–æ–≤–æ–≥–æ —Ü–∏–∫–ª–∞
    gameLoop();
    
    console.log('‚úÖ Game initialized successfully');
}

// –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞ canvas
function resizeCanvas() {
    const container = gameCanvas.parentElement;
    const rect = container.getBoundingClientRect();
    
    gameCanvas.width = rect.width;
    gameCanvas.height = rect.height;
    
    // –û–±–Ω–æ–≤–∏—Ç—å –ø–æ–∑–∏—Ü–∏–∏ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤
    updateInteractiveObjectPositions();
}

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–æ–±—ã—Ç–∏–π
function setupEventListeners() {
    // –ö–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π
    document.getElementById('look-around').addEventListener('click', () => {
        lookAround();
    });
    
    document.getElementById('interact-btn').addEventListener('click', () => {
        showInteractionHints();
    });
    
    document.getElementById('move-btn').addEventListener('click', () => {
        showMovementOptions();
    });
    
    document.getElementById('menu-btn-action').addEventListener('click', () => {
        showGameMenu();
    });
    
    // –ö–ª–∏–∫–∏ –ø–æ canvas –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è
    gameCanvas.addEventListener('click', handleCanvasClick);
    
    // Hover —ç—Ñ—Ñ–µ–∫—Ç—ã
    gameCanvas.addEventListener('mousemove', handleCanvasHover);
}

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤
function setupInteractiveObjects() {
    const overlay = document.getElementById('interactive-overlay');
    overlay.innerHTML = '';
    
    const location = gameLocations[currentLocation];
    if (!location) return;
    
    interactiveObjects = [];
    
    location.objects.forEach(obj => {
        const element = document.createElement('div');
        element.className = 'interactive-object';
        element.id = `obj-${obj.id}`;
        element.innerHTML = `
            <div class="fp-object-label">${obj.name}</div>
        `;
        
        element.addEventListener('click', () => {
            interactWithObject(obj);
        });
        
        overlay.appendChild(element);
        interactiveObjects.push({ element, data: obj });
    });
    
    updateInteractiveObjectPositions();
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–π –æ–±—ä–µ–∫—Ç–æ–≤
function updateInteractiveObjectPositions() {
    if (!gameCanvas) return;
    
    const canvasRect = gameCanvas.getBoundingClientRect();
    
    interactiveObjects.forEach(({ element, data }) => {
        const x = (data.x / 100) * canvasRect.width;
        const y = (data.y / 100) * canvasRect.height;
        const width = (data.width / 100) * canvasRect.width;
        const height = (data.height / 100) * canvasRect.height;
        
        element.style.left = `${x}px`;
        element.style.top = `${y}px`;
        element.style.width = `${width}px`;
        element.style.height = `${height}px`;
    });
}

// ===== RENDERING FUNCTIONS =====

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞
function render() {
    if (!gameContext) return;
    
    const canvas = gameCanvas;
    const ctx = gameContext;
    
    // –û—á–∏—Å—Ç–∫–∞ canvas
    ctx.clearRect(0, 0, canvas.width, canvas.height);
    
    // –†–µ–Ω–¥–µ—Ä —Ñ–æ–Ω–∞ –ª–æ–∫–∞—Ü–∏–∏
    renderBackground();
    
    // –†–µ–Ω–¥–µ—Ä —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –ª–æ–∫–∞—Ü–∏–∏
    renderLocationElements();
    
    // –≠—Ñ—Ñ–µ–∫—Ç—ã –∏ –∞–Ω–∏–º–∞—Ü–∏–∏
    renderEffects();
}

// –†–µ–Ω–¥–µ—Ä —Ñ–æ–Ω–∞
function renderBackground() {
    const canvas = gameCanvas;
    const ctx = gameContext;
    const location = gameLocations[currentLocation];
    const bg = backgrounds[location.background];
    
    if (!bg) return;
    
    // –ù–µ–±–æ/–≤–µ—Ä—Ö–Ω—è—è —á–∞—Å—Ç—å
    const gradient = ctx.createLinearGradient(0, 0, 0, canvas.height * 0.4);
    gradient.addColorStop(0, bg.sky);
    gradient.addColorStop(1, lightenColor(bg.wall, 20));
    
    ctx.fillStyle = gradient;
    ctx.fillRect(0, 0, canvas.width, canvas.height * 0.4);
    
    // –°—Ç–µ–Ω—ã
    ctx.fillStyle = bg.wall;
    ctx.fillRect(0, canvas.height * 0.4, canvas.width, canvas.height * 0.35);
    
    // –ü–æ–ª
    const floorGradient = ctx.createLinearGradient(0, canvas.height * 0.75, 0, canvas.height);
    floorGradient.addColorStop(0, bg.floor);
    floorGradient.addColorStop(1, darkenColor(bg.floor, 30));
    
    ctx.fillStyle = floorGradient;
    ctx.fillRect(0, canvas.height * 0.75, canvas.width, canvas.height * 0.25);
    
    // –≠–ª–µ–º–µ–Ω—Ç—ã —Ñ–æ–Ω–∞
    renderBackgroundElements(bg.elements);
}

// –†–µ–Ω–¥–µ—Ä —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —Ñ–æ–Ω–∞
function renderBackgroundElements(elements) {
    const canvas = gameCanvas;
    const ctx = gameContext;
    
    if (!elements) return;
    
    elements.forEach(element => {
        const x = (element.x / 100) * canvas.width;
        const y = (element.y / 100) * canvas.height;
        const width = (element.width / 100) * canvas.width;
        const height = (element.height / 100) * canvas.height;
        
        switch (element.type) {
            case 'window':
                renderWindow(x, y, width, height);
                break;
            case 'projector_screen':
                renderProjectorScreen(x, y, width, height);
                break;
            case 'plants':
                renderPlants(x, y, width, height);
                break;
            case 'modern_lights':
                renderModernLights(x, y, width, height);
                break;
            case 'marble_pillars':
                renderMarblePillars(x, y, width, height);
                break;
            case 'chandelier':
                renderChandelier(x, y, width, height);
                break;
            case 'cafe_lights':
                renderCafeLights(x, y, width, height);
                break;
            case 'cafe_decor':
                renderCafeDecor(x, y, width, height);
                break;
        }
    });
}

// –†–µ–Ω–¥–µ—Ä –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
function renderWindow(x, y, width, height) {
    const ctx = gameContext;
    
    // –†–∞–º–∞ –æ–∫–Ω–∞
    ctx.fillStyle = '#8B4513';
    ctx.fillRect(x, y, width, height);
    
    // –°—Ç–µ–∫–ª–æ
    ctx.fillStyle = '#E6F3FF';
    ctx.fillRect(x + 2, y + 2, width - 4, height - 4);
    
    // –ö—Ä–µ—Å—Ç–æ–≤–∏–Ω–∞
    ctx.fillStyle = '#8B4513';
    ctx.fillRect(x + width/2 - 1, y + 2, 2, height - 4);
    ctx.fillRect(x + 2, y + height/2 - 1, width - 4, 2);
}

function renderProjectorScreen(x, y, width, height) {
    const ctx = gameContext;
    
    // –≠–∫—Ä–∞–Ω
    ctx.fillStyle = '#f8f9fa';
    ctx.fillRect(x, y, width, height);
    
    // –†–∞–º–∫–∞
    ctx.strokeStyle = '#343a40';
    ctx.lineWidth = 2;
    ctx.strokeRect(x, y, width, height);
    
    // –¢–µ–∫—Å—Ç nFactorial
    ctx.fillStyle = '#007bff';
    ctx.font = 'bold 16px Arial';
    ctx.textAlign = 'center';
    ctx.fillText('nFactorial', x + width/2, y + height/2);
}

function renderPlants(x, y, width, height) {
    const ctx = gameContext;
    
    // –ì–æ—Ä—à–æ–∫
    ctx.fillStyle = '#8B4513';
    ctx.fillRect(x, y + height * 0.7, width, height * 0.3);
    
    // –†–∞—Å—Ç–µ–Ω–∏–µ
    ctx.fillStyle = '#228B22';
    ctx.beginPath();
    ctx.ellipse(x + width/2, y + height * 0.4, width * 0.4, height * 0.4, 0, 0, 2 * Math.PI);
    ctx.fill();
}

function renderModernLights(x, y, width, height) {
    const ctx = gameContext;
    
    ctx.fillStyle = '#FFD700';
    for (let i = 0; i < 5; i++) {
        const lightX = x + (i * width / 4);
        ctx.beginPath();
        ctx.arc(lightX, y + height/2, 3, 0, 2 * Math.PI);
        ctx.fill();
    }
}

function renderMarblePillars(x, y, width, height) {
    const ctx = gameContext;
    
    // –û—Å–Ω–æ–≤–∞
    ctx.fillStyle = '#f8f9fa';
    ctx.fillRect(x, y, width, height);
    
    // –ú—Ä–∞–º–æ—Ä–Ω—ã–µ –ø—Ä–æ–∂–∏–ª–∫–∏
    ctx.strokeStyle = '#adb5bd';
    ctx.lineWidth = 1;
    for (let i = 0; i < 3; i++) {
        ctx.beginPath();
        ctx.moveTo(x, y + (i * height / 3));
        ctx.lineTo(x + width, y + (i * height / 3) + 5);
        ctx.stroke();
    }
}

function renderChandelier(x, y, width, height) {
    const ctx = gameContext;
    
    // –û—Å–Ω–æ–≤–∞ –ª—é—Å—Ç—Ä—ã
    ctx.fillStyle = '#FFD700';
    ctx.fillRect(x + width * 0.2, y, width * 0.6, height * 0.3);
    
    // –°–≤–µ—Ç
    ctx.fillStyle = 'rgba(255, 255, 0, 0.3)';
    ctx.beginPath();
    ctx.ellipse(x + width/2, y + height, width * 0.8, height * 0.5, 0, 0, 2 * Math.PI);
    ctx.fill();
}

function renderCafeLights(x, y, width, height) {
    const ctx = gameContext;
    
    ctx.fillStyle = '#FF6B35';
    for (let i = 0; i < 8; i++) {
        const lightX = x + (i * width / 7);
        ctx.beginPath();
        ctx.arc(lightX, y + height/2, 2, 0, 2 * Math.PI);
        ctx.fill();
    }
}

function renderCafeDecor(x, y, width, height) {
    const ctx = gameContext;
    
    // –î–µ–∫–æ—Ä –∫–∞—Ñ–µ
    ctx.fillStyle = '#8B4513';
    ctx.fillRect(x, y, width, height);
    
    ctx.fillStyle = '#FFE4B5';
    ctx.fillRect(x + 2, y + 2, width - 4, height - 4);
}

// –†–µ–Ω–¥–µ—Ä —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –ª–æ–∫–∞—Ü–∏–∏ (–æ–±—ä–µ–∫—Ç—ã)
function renderLocationElements() {
    // –û–±—ä–µ–∫—Ç—ã —Ç–µ–ø–µ—Ä—å —Ä–µ–Ω–¥–µ—Ä—è—Ç—Å—è –∫–∞–∫ HTML —ç–ª–µ–º–µ–Ω—Ç—ã
    // –ó–¥–µ—Å—å –º–æ–∂–µ–º –¥–æ–±–∞–≤–∏—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —ç—Ñ—Ñ–µ–∫—Ç—ã
}

// –†–µ–Ω–¥–µ—Ä —ç—Ñ—Ñ–µ–∫—Ç–æ–≤
function renderEffects() {
    const ctx = gameContext;
    
    // –≠—Ñ—Ñ–µ–∫—Ç –≤—Ä–µ–º–µ–Ω–∏ –¥–Ω—è
    renderTimeOfDayEffect();
    
    // –ß–∞—Å—Ç–∏—Ü—ã/–∞—Ç–º–æ—Å—Ñ–µ—Ä–∞
    renderAtmosphere();
}

function renderTimeOfDayEffect() {
    const ctx = gameContext;
    const canvas = gameCanvas;
    
    let overlayColor;
    let alpha;
    
    switch (gameStats.timeOfDay) {
        case 'morning':
            overlayColor = 'rgba(255, 223, 186, ';
            alpha = 0.1;
            break;
        case 'afternoon':
            overlayColor = 'rgba(255, 255, 255, ';
            alpha = 0;
            break;
        case 'evening':
            overlayColor = 'rgba(255, 140, 0, ';
            alpha = 0.15;
            break;
        case 'night':
            overlayColor = 'rgba(25, 25, 112, ';
            alpha = 0.3;
            break;
    }
    
    if (alpha > 0) {
        ctx.fillStyle = overlayColor + alpha + ')';
        ctx.fillRect(0, 0, canvas.width, canvas.height);
    }
}

function renderAtmosphere() {
    // –î–æ–±–∞–≤–∏—Ç—å —á–∞—Å—Ç–∏—Ü—ã, –ø—ã–ª—å, etc.
    // –î–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã –ø–æ–∫–∞ –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
}

// ===== GAME ACTIONS =====

// –í–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ —Å –æ–±—ä–µ–∫—Ç–æ–º
function interactWithObject(obj) {
    console.log(`üéØ Interacting with: ${obj.name}`);
    
    tg?.HapticFeedback?.impactOccurred('light');
    
    switch (obj.action) {
        case 'use_coffee':
            useCoffeeMachine();
            break;
        case 'use_computer':
            useComputer();
            break;
        case 'talk_to_mentor':
            talkToMentor();
            break;
        case 'check_assignments':
            checkAssignments();
            break;
        case 'manage_projects':
            manageProjects();
            break;
        case 'team_meeting':
            teamMeeting();
            break;
        case 'admire_logo':
            admireLogo();
            break;
        case 'read_announcements':
            readAnnouncements();
            break;
        case 'visit_reception':
            visitReception();
            break;
        case 'buy_food':
            buyFood();
            break;
        case 'take_rest':
            takeRest();
            break;
        case 'network':
            networkWithStudents();
            break;
        default:
            showMessage(`–í–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ —Å ${obj.name}`);
    }
}

// –û—Å–º–æ—Ç—Ä–µ—Ç—å—Å—è
function lookAround() {
    const location = gameLocations[currentLocation];
    showMessage(`üìç ${location.name}\n\n${location.description}`);
    
    // –ü–æ–¥—Å–≤–µ—Ç–∏—Ç—å –≤—Å–µ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã
    interactiveObjects.forEach(({ element }) => {
        element.classList.add('highlighted');
        setTimeout(() => {
            element.classList.remove('highlighted');
        }, 3000);
    });
}

// –ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–¥—Å–∫–∞–∑–∫–∏ –ø–æ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—é
function showInteractionHints() {
    const location = gameLocations[currentLocation];
    const hints = location.objects.map(obj => `‚Ä¢ ${obj.name}`).join('\n');
    
    showMessage(`üéØ –î–æ—Å—Ç—É–ø–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è:\n\n${hints}\n\n–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –æ–±—ä–µ–∫—Ç –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è`);
}

// –ü–æ–∫–∞–∑–∞—Ç—å –≤–∞—Ä–∏–∞–Ω—Ç—ã –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è
function showMovementOptions() {
    const location = gameLocations[currentLocation];
    
    if (location.exits.length === 0) {
        showMessage('üö™ –û—Ç—Å—é–¥–∞ –Ω–µ–∫—É–¥–∞ –ø–æ–π—Ç–∏');
        return;
    }
    
    const exitsList = location.exits.map(exit => 
        `‚Ä¢ ${exit.name} (${getDirectionEmoji(exit.direction)})`
    ).join('\n');
    
    showMessage(`üö∂ –ö—É–¥–∞ –ø–æ–π—Ç–∏?\n\n${exitsList}`, () => {
        showExitButtons(location.exits);
    });
}

// –ü–æ–∫–∞–∑–∞—Ç—å –∫–Ω–æ–ø–∫–∏ –≤—ã—Ö–æ–¥–æ–≤
function showExitButtons(exits) {
    const actionButtons = document.querySelector('.action-buttons');
    const originalHTML = actionButtons.innerHTML;
    
    actionButtons.innerHTML = exits.map(exit => `
        <button class="action-btn" onclick="moveToLocation('${exit.target}')">
            <span class="action-icon">${getDirectionEmoji(exit.direction)}</span>
            <span>${exit.name}</span>
        </button>
    `).join('') + `
        <button class="action-btn" onclick="restoreActionButtons()">
            <span class="action-icon">‚Ü©Ô∏è</span>
            <span>–ù–∞–∑–∞–¥</span>
        </button>
    `;
    
    // –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π HTML –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è
    window.originalActionButtons = originalHTML;
}

// –í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ –∫–Ω–æ–ø–∫–∏
function restoreActionButtons() {
    if (window.originalActionButtons) {
        document.querySelector('.action-buttons').innerHTML = window.originalActionButtons;
        setupEventListeners(); // –ü–µ—Ä–µ—Å–æ–∑–¥–∞—Ç—å –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
    }
}

// –ü–µ—Ä–µ–º–µ—Å—Ç–∏—Ç—å—Å—è –≤ –ª–æ–∫–∞—Ü–∏—é
function moveToLocation(targetLocation) {
    if (!gameLocations[targetLocation]) {
        showMessage('‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –ª–æ–∫–∞—Ü–∏—è');
        return;
    }
    
    console.log(`üö∂ Moving to: ${targetLocation}`);
    
    currentLocation = targetLocation;
    setupInteractiveObjects();
    
    const location = gameLocations[currentLocation];
    showMessage(`üìç –ü–µ—Ä–µ—à–ª–∏ –≤: ${location.name}`);
    
    // –ù–µ–±–æ–ª—å—à–∏–µ –∑–∞—Ç—Ä–∞—Ç—ã —Ä–µ—Å—É—Ä—Å–æ–≤ –Ω–∞ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ
    updateResource('motivation', -5);
    
    // –í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∫–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π
    restoreActionButtons();
    
    tg?.HapticFeedback?.impactOccurred('medium');
}

// ===== RESOURCE ACTIONS =====

function useCoffeeMachine() {
    if (gameResources.coffee >= 90) {
        showMessage('‚òï –£ –≤–∞—Å —É–∂–µ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∫–æ—Ñ–µ!');
        return;
    }
    
    updateResource('coffee', 30);
    gameStats.coffeeConsumed++;
    
    const messages = [
        '‚òï –ê—Ä–æ–º–∞—Ç–Ω—ã–π –∫–æ—Ñ–µ –¥–æ–±–∞–≤–∏–ª –≤–∞–º —ç–Ω–µ—Ä–≥–∏–∏!',
        '‚òï –ë–æ–¥—Ä—è—â–∏–π –Ω–∞–ø–∏—Ç–æ–∫ –ø–æ–¥–Ω—è–ª –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ!',
        '‚òï –ö–æ—Ñ–µ–∏–Ω –Ω–∞—á–∞–ª –¥–µ–π—Å—Ç–≤–æ–≤–∞—Ç—å!',
        '‚òï –¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –∫–æ–¥–∏—Ç—å –¥–æ —É—Ç—Ä–∞!'
    ];
    
    showMessage(messages[Math.floor(Math.random() * messages.length)]);
    
    // –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è
    if (gameStats.coffeeConsumed === 1) {
        unlockAchievement('first_coffee');
    }
    if (gameStats.coffeeConsumed === 10) {
        unlockAchievement('coffee_lover');
    }
}

function useComputer() {
    if (gameResources.knowledge >= 90) {
        showMessage('üß† –í–∞—à–∏ –∑–Ω–∞–Ω–∏—è —É–∂–µ –Ω–∞ –º–∞–∫—Å–∏–º—É–º–µ!');
        return;
    }
    
    if (gameResources.coffee < 10) {
        showMessage('‚òï –ù—É–∂–Ω–æ –±–æ–ª—å—à–µ –∫–æ—Ñ–µ –¥–ª—è –∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏–∏!');
        return;
    }
    
    updateResource('knowledge', 10);
    updateResource('coffee', -10);
    updateResource('motivation', -5);
    
    gameStats.totalScore += 50;
    updateScoreDisplay();
    
    const codingMessages = [
        'üíª –ù–∞–ø–∏—Å–∞–ª–∏ –∫—Ä—É—Ç–æ–π –∫–æ–¥ –Ω–∞ JavaScript!',
        'üíª –†–∞–∑–æ–±—Ä–∞–ª–∏—Å—å —Å React —Ö—É–∫–∞–º–∏!',
        'üíª –°–æ–∑–¥–∞–ª–∏ –∫—Ä–∞—Å–∏–≤—ã–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç!',
        'üíª –ò—Å–ø—Ä–∞–≤–∏–ª–∏ –±–∞–≥ –∏ —á—É–≤—Å—Ç–≤—É–µ—Ç–µ —Å–µ–±—è –≥–µ—Ä–æ–µ–º!',
        'üíª –ò–∑—É—á–∏–ª–∏ –Ω–æ–≤—É—é –±–∏–±–ª–∏–æ—Ç–µ–∫—É!',
        'üíª –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–ª–∏ –∞–ª–≥–æ—Ä–∏—Ç–º!'
    ];
    
    showMessage(codingMessages[Math.floor(Math.random() * codingMessages.length)]);
}

function talkToMentor() {
    if (gameResources.motivation >= 90) {
        showMessage('üí™ –í–∞—à–∞ –º–æ—Ç–∏–≤–∞—Ü–∏—è —É–∂–µ –Ω–∞ –ø–∏–∫–µ!');
        return;
    }
    
    if (gameResources.knowledge < 5) {
        showMessage('üß† –°–Ω–∞—á–∞–ª–∞ –∏–∑—É—á–∏—Ç–µ –±–∞–∑—É, –ø–æ—Ç–æ–º –ø—Ä–∏—Ö–æ–¥–∏—Ç–µ —Å –≤–æ–ø—Ä–æ—Å–∞–º–∏!');
        return;
    }
    
    updateResource('motivation', 20);
    updateResource('knowledge', -10);
    
    gameStats.mentorInteractions++;
    gameStats.totalScore += 30;
    updateScoreDisplay();
    
    const mentorMessages = [
        'üë®‚Äçüè´ "–û—Ç–ª–∏—á–Ω–∞—è —Ä–∞–±–æ—Ç–∞! –ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –≤ —Ç–æ–º –∂–µ –¥—É—Ö–µ!"',
        'üë®‚Äçüè´ "–ü–æ–º–Ω–∏—Ç–µ: –ª—É—á—à–∏–π –∫–æ–¥ - —ç—Ç–æ —á–∏—Ç–∞–µ–º—ã–π –∫–æ–¥"',
        'üë®‚Äçüè´ "–û—à–∏–±–∫–∏ - —ç—Ç–æ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –¥–ª—è –æ–±—É—á–µ–Ω–∏—è"',
        'üë®‚Äçüè´ "–ù–µ –∑–∞–±—ã–≤–∞–π—Ç–µ –ø—Ä–æ –æ—Ç–¥—ã—Ö –º–µ–∂–¥—É –∫–æ–¥–∏–Ω–≥–æ–º"',
        'üë®‚Äçüè´ "–í–∞—à –ø—Ä–æ–≥—Ä–µ—Å—Å –≤–ø–µ—á–∞—Ç–ª—è–µ—Ç!"',
        'üë®‚Äçüè´ "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–æ–≤—ã–π –ø–æ–¥—Ö–æ–¥ –∫ —ç—Ç–æ–π –∑–∞–¥–∞—á–µ"'
    ];
    
    showMessage(mentorMessages[Math.floor(Math.random() * mentorMessages.length)]);
    
    if (gameStats.mentorInteractions === 1) {
        unlockAchievement('first_mentor_talk');
    }
}

function checkAssignments() {
    const assignments = [
        'üìã –°–µ–≥–æ–¥–Ω—è: –°–æ–∑–¥–∞—Ç—å React –∫–æ–º–ø–æ–Ω–µ–Ω—Ç',
        'üìã –ó–∞–≤—Ç—Ä–∞: –ò–∑—É—á–∏—Ç—å —Ö—É–∫–∏ useState –∏ useEffect',
        'üìã –ù–∞ –Ω–µ–¥–µ–ª–µ: –§–∏–Ω–∞–ª—å–Ω—ã–π –ø—Ä–æ–µ–∫—Ç',
        'üìã –î–µ–¥–ª–∞–π–Ω: –ü—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—è –≤ –ø—è—Ç–Ω–∏—Ü—É',
        'üìã –ù–æ–≤–æ–µ: –•–∞–∫–∞—Ç–æ–Ω –≤ –≤—ã—Ö–æ–¥–Ω—ã–µ'
    ];
    
    const randomAssignment = assignments[Math.floor(Math.random() * assignments.length)];
    showMessage(randomAssignment);
}

function manageProjects() {
    showMessage('üöÄ –ü—Ä–æ–µ–∫—Ç—ã –¥–æ—Å—Ç—É–ø–Ω—ã:\n\n‚Ä¢ Todo App (–õ–µ–≥–∫–∏–π)\n‚Ä¢ E-commerce (–°—Ä–µ–¥–Ω–∏–π)\n‚Ä¢ Social Network (–°–ª–æ–∂–Ω—ã–π)\n\n–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–µ–∫—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã!');
}

function teamMeeting() {
    updateResource('motivation', 15);
    gameStats.totalScore += 25;
    updateScoreDisplay();
    
    showMessage('üë• –ü—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–∞—è –≤—Å—Ç—Ä–µ—á–∞ —Å –∫–æ–º–∞–Ω–¥–æ–π! –û–±—Å—É–¥–∏–ª–∏ –ø–ª–∞–Ω—ã –∏ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–∏–ª–∏ –∑–∞–¥–∞—á–∏.');
}

function admireLogo() {
    updateResource('motivation', 5);
    showMessage('üè¢ –õ–æ–≥–æ—Ç–∏–ø nFactorial –≤–¥–æ—Ö–Ω–æ–≤–ª—è–µ—Ç –Ω–∞ –Ω–æ–≤—ã–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è!');
}

function readAnnouncements() {
    const announcements = [
        'üì¢ –ù–æ–≤—ã–π —Ö–∞–∫–∞—Ç–æ–Ω —É–∂–µ –≤ —ç—Ç—É —Å—É–±–±–æ—Ç—É!',
        'üì¢ –í—Å—Ç—Ä–µ—á–∞ —Å –≤—ã–ø—É—Å–∫–Ω–∏–∫–∞–º–∏ –≤ —á–µ—Ç–≤–µ—Ä–≥',
        'üì¢ –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ª–µ–∫—Ü–∏–∏ –ø–æ –∞–ª–≥–æ—Ä–∏—Ç–º–∞–º',
        'üì¢ –ö–∞—Ä—å–µ—Ä–Ω–∞—è —è—Ä–º–∞—Ä–∫–∞ –≤ —Å–ª–µ–¥—É—é—â–µ–º –º–µ—Å—è—Ü–µ',
        'üì¢ –û—Ç–∫—Ä—ã—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–∞ –∏–Ω—Ç–µ–Ω—Å–∏–≤'
    ];
    
    const randomNews = announcements[Math.floor(Math.random() * announcements.length)];
    showMessage(randomNews);
}

function visitReception() {
    showMessage('üíº –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏—è: "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ nFactorial! –í—Å–µ –≤–æ–ø—Ä–æ—Å—ã —Ä–µ—à–∞–µ–º –æ–ø–µ—Ä–∞—Ç–∏–≤–Ω–æ."');
}

function buyFood() {
    if (gameResources.motivation >= 90) {
        showMessage('üçï –í—ã —É–∂–µ —Å—ã—Ç—ã –∏ –¥–æ–≤–æ–ª—å–Ω—ã!');
        return;
    }
    
    updateResource('motivation', 25);
    updateResource('sleep', 10);
    gameStats.totalScore += 20;
    updateScoreDisplay();
    
    showMessage('üçï –í–∫—É—Å–Ω–∞—è –µ–¥–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏–ª–∞ —Å–∏–ª—ã –∏ –ø–æ–¥–Ω—è–ª–∞ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ!');
}

function takeRest() {
    if (gameResources.sleep >= 90) {
        showMessage('üò¥ –í—ã —É–∂–µ —Ö–æ—Ä–æ—à–æ –æ—Ç–¥–æ—Ö–Ω—É–ª–∏!');
        return;
    }
    
    updateResource('sleep', 40);
    updateResource('motivation', 10);
    
    showMessage('üò¥ –ö–æ—Ä–æ—Ç–∫–∏–π –æ—Ç–¥—ã—Ö –æ—Å–≤–µ–∂–∏–ª –≥–æ–ª–æ–≤—É. –¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –∫–æ–¥–∏—Ç—å —Å –Ω–æ–≤—ã–º–∏ —Å–∏–ª–∞–º–∏!');
}

function networkWithStudents() {
    updateResource('motivation', 15);
    gameStats.totalScore += 35;
    updateScoreDisplay();
    
    const networkingMessages = [
        'ü§ù –ü–æ–∑–Ω–∞–∫–æ–º–∏–ª–∏—Å—å —Å –∫—Ä—É—Ç—ã–º —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–º!',
        'ü§ù –û–±–º–µ–Ω—è–ª–∏—Å—å –∫–æ–Ω—Ç–∞–∫—Ç–∞–º–∏ —Å –±—É–¥—É—â–∏–º –∫–æ–ª–ª–µ–≥–æ–π!',
        'ü§ù –£–∑–Ω–∞–ª–∏ –æ –Ω–æ–≤—ã—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è—Ö –≤ IT!',
        'ü§ù –î–æ–≥–æ–≤–æ—Ä–∏–ª–∏—Å—å –æ —Å–æ–≤–º–µ—Å—Ç–Ω–æ–º –ø—Ä–æ–µ–∫—Ç–µ!',
        'ü§ù –ü–æ–ª—É—á–∏–ª–∏ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –Ω–∞ —Å—Ç–∞–∂–∏—Ä–æ–≤–∫—É!'
    ];
    
    showMessage(networkingMessages[Math.floor(Math.random() * networkingMessages.length)]);
}

// ===== UTILITY FUNCTIONS =====

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–µ—Å—É—Ä—Å–æ–≤
function updateResource(type, amount) {
    if (!gameResources.hasOwnProperty(type)) return;
    
    gameResources[type] = Math.max(0, Math.min(100, gameResources[type] + amount));
    
    // –û–±–Ω–æ–≤–∏—Ç—å UI
    const fillElement = document.getElementById(`${type}-fill`);
    const valueElement = document.getElementById(`${type}-value`);
    
    if (fillElement) {
        fillElement.style.width = `${gameResources[type]}%`;
    }
    
    if (valueElement) {
        valueElement.textContent = Math.round(gameResources[type]);
    }
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
    checkResourceAchievements();
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –æ—á–∫–æ–≤
function updateScoreDisplay() {
    // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ–±—â–µ–≥–æ —Å—á–µ—Ç–∞
    console.log(`Score: ${gameStats.totalScore}`);
}

// –ü–æ–∫–∞–∑–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ
function showMessage(text, callback = null) {
    const overlay = document.createElement('div');
    overlay.className = 'overlay';
    overlay.innerHTML = `
        <div class="menu-content">
            <button class="close-menu" onclick="this.parentElement.parentElement.remove()">‚úï</button>
            <p style="font-size: 8px; line-height: 1.4; margin-bottom: 15px;">${text.replace(/\n/g, '<br>')}</p>
            <button class="pixel-btn primary" onclick="this.parentElement.parentElement.remove()${callback ? '; (' + callback + ')()' : ''}">OK</button>
        </div>
    `;
    
    document.body.appendChild(overlay);
    
    tg?.HapticFeedback?.notificationOccurred('success');
    
    // –ê–≤—Ç–æ—É–¥–∞–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥
    setTimeout(() => {
        if (overlay.parentElement) {
            overlay.remove();
        }
    }, 5000);
}

// –ü–æ–∫–∞–∑–∞—Ç—å –∏–≥—Ä–æ–≤–æ–µ –º–µ–Ω—é
function showGameMenu() {
    const menuHTML = `
        <div class="overlay">
            <div class="menu-content">
                <button class="close-menu" onclick="this.parentElement.parentElement.remove()">‚úï</button>
                <h3>–ú–µ–Ω—é –∏–≥—Ä—ã</h3>
                <button class="menu-item" onclick="showStats()">üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</button>
                <button class="menu-item" onclick="showAchievements()">üèÜ –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è</button>
                <button class="menu-item" onclick="showHelp()">‚ùì –ü–æ–º–æ—â—å</button>
                <button class="menu-item" onclick="showSettings()">‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏</button>
                <button class="menu-item danger" onclick="restartGame()">üîÑ –ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ</button>
            </div>
        </div>
    `;
    
    document.body.insertAdjacentHTML('beforeend', menuHTML);
}

// –†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ
function unlockAchievement(achievementId) {
    showMessage(`üéâ –î–æ—Å—Ç–∏–∂–µ–Ω–∏–µ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ!\n\nüèÜ ${getAchievementName(achievementId)}`);
    gameStats.totalScore += 100;
    updateScoreDisplay();
}

// –ü–æ–ª—É—á–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
function getAchievementName(id) {
    const achievements = {
        'first_coffee': '–ü–µ—Ä–≤—ã–π –≥–ª–æ—Ç–æ–∫ ‚òï',
        'coffee_lover': '–ö–æ—Ñ–µ–º–∞–Ω ‚òï',
        'first_mentor_talk': '–ó–Ω–∞–∫–æ–º—Å—Ç–≤–æ —Å –º–µ–Ω—Ç–æ—Ä–æ–º üë®‚Äçüè´'
    };
    
    return achievements[id] || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ';
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π –ø–æ —Ä–µ—Å—É—Ä—Å–∞–º
function checkResourceAchievements() {
    if (gameResources.knowledge >= 100) {
        unlockAchievement('knowledge_master');
    }
}

// –≠–º–æ–¥–∂–∏ –¥–ª—è –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π
function getDirectionEmoji(direction) {
    const emojis = {
        'forward': '‚¨ÜÔ∏è',
        'back': '‚¨áÔ∏è',
        'left': '‚¨ÖÔ∏è',
        'right': '‚û°Ô∏è'
    };
    
    return emojis[direction] || 'üö™';
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ü–≤–µ—Ç–∞
function lightenColor(color, percent) {
    // –ü—Ä–æ—Å—Ç–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è –æ—Å–≤–µ—Ç–ª–µ–Ω–∏—è —Ü–≤–µ—Ç–∞
    return color;
}

function darkenColor(color, percent) {
    // –ü—Ä–æ—Å—Ç–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞—Ç–µ–º–Ω–µ–Ω–∏—è —Ü–≤–µ—Ç–∞
    return color;
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–ª–∏–∫–æ–≤ –ø–æ canvas
function handleCanvasClick(event) {
    const rect = gameCanvas.getBoundingClientRect();
    const x = event.clientX - rect.left;
    const y = event.clientY - rect.top;
    
    console.log(`Canvas click at: ${x}, ${y}`);
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–≤–µ–¥–µ–Ω–∏—è –º—ã—à–∏
function handleCanvasHover(event) {
    // –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —ç—Ñ—Ñ–µ–∫—Ç—ã –ø—Ä–∏ –Ω–∞–≤–µ–¥–µ–Ω–∏–∏
}

// –ò–≥—Ä–æ–≤–æ–π —Ü–∏–∫–ª
function gameLoop() {
    render();
    
    // –õ–æ–≥–∏–∫–∞ –∏–≥—Ä—ã
    gameLogicUpdate();
    
    animationId = requestAnimationFrame(gameLoop);
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–≥—Ä–æ–≤–æ–π –ª–æ–≥–∏–∫–∏
function gameLogicUpdate() {
    // –ü–æ—Å—Ç–µ–ø–µ–Ω–Ω–æ–µ —É–º–µ–Ω—å—à–µ–Ω–∏–µ —Ä–µ—Å—É—Ä—Å–æ–≤
    if (Date.now() % 10000 < 50) { // –ö–∞–∂–¥—ã–µ 10 —Å–µ–∫—É–Ω–¥
        updateResource('motivation', -1);
        updateResource('sleep', -1);
        
        if (gameResources.coffee > 0) {
            updateResource('coffee', -1);
        }
    }
}

// ===== INITIALIZATION =====

// Telegram Web App –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å
if (tg) {
    tg.ready();
    tg.expand();
    
    // –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if (tg.initDataUnsafe?.user) {
        user = tg.initDataUnsafe.user;
        console.log('üë§ User:', user);
    }
}

// –ó–∞–ø—É—Å–∫ –∏–≥—Ä—ã –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
document.addEventListener('DOMContentLoaded', () => {
    console.log('üéÆ DOM loaded, starting game...');
    
    // –ò–º–∏—Ç–∞—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏
    setTimeout(() => {
        // –°–∫—Ä—ã—Ç—å —ç–∫—Ä–∞–Ω –∑–∞–≥—Ä—É–∑–∫–∏
        const loadingScreen = document.querySelector('.loading-screen');
        if (loadingScreen) {
            loadingScreen.style.display = 'none';
        }
        
        // –ü–æ–∫–∞–∑–∞—Ç—å —ç–∫—Ä–∞–Ω –≤—Ö–æ–¥–∞ –∏–ª–∏ –∏–≥—Ä—ã
        if (user) {
            showGameScreen();
        } else {
            showLoginScreen();
        }
    }, 3000);
});

// –ü–æ–∫–∞–∑–∞—Ç—å —ç–∫—Ä–∞–Ω –∏–≥—Ä—ã
function showGameScreen() {
    document.querySelector('.login-screen').style.display = 'none';
    document.querySelector('.game-screen').classList.add('active');
    
    initGame();
}

// –ü–æ–∫–∞–∑–∞—Ç—å —ç–∫—Ä–∞–Ω –≤—Ö–æ–¥–∞
function showLoginScreen() {
    document.querySelector('.login-screen').style.display = 'flex';
}

// –í—Ö–æ–¥ –≤ –∏–≥—Ä—É
function startGame() {
    const username = document.getElementById('username').value;
    const selectedAvatar = document.querySelector('.avatar-option.selected')?.textContent;
    
    if (!username || !selectedAvatar) {
        showMessage('‚ùå –ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è');
        return;
    }
    
    // –°–æ–∑–¥–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user = {
        username: username,
        avatar: selectedAvatar,
        first_name: username
    };
    
    showGameScreen();
}

console.log('‚úÖ nFactorial Adventures script loaded'); 