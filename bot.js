const { Telegraf, Markup } = require('telegraf');
const fs = require('fs');
const path = require('path');
const mongoose = require('mongoose');
require('dotenv').config();

// –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MongoDB (–∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ—Ç –∂–µ URI —á—Ç–æ –∏ —Å–µ—Ä–≤–µ—Ä)
if (process.env.MONGO_URI) {
    mongoose.connect(process.env.MONGO_URI)
        .then(() => console.log('ü§ñ Bot connected to MongoDB'))
        .catch(err => console.error('‚ùå Bot MongoDB connection error:', err));
} else {
    console.warn('‚ö†Ô∏è  MONGO_URI not set for bot, some features may not work');
}

// –ò–º–ø–æ—Ä—Ç –º–æ–¥–µ–ª–µ–π
const User = require('./models/User');
const DoomSession = require('./models/DoomSession');
const GameSession = require('./models/GameSession');
const Achievement = require('./models/Achievement');

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
const bot = new Telegraf(process.env.BOT_TOKEN);

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–º–∞–Ω–¥ –¥–ª—è –º–µ–Ω—é (—Å–ª–µ–≤–∞ –æ—Ç –ø–æ–ª—è –≤–≤–æ–¥–∞)
bot.telegram.setMyCommands([
    { command: 'start', description: 'üöÄ –ù–∞—á–∞—Ç—å –∏–≥—Ä—É' },
    { command: 'game', description: 'üéÆ –û—Ç–∫—Ä—ã—Ç—å –∏–≥—Ä—É' },
    { command: 'help', description: '‚ùì –ü–æ–º–æ—â—å' },
    { command: 'stats', description: 'üìä –ú–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞' },
    { command: 'leaderboard', description: 'üèÜ –¢–æ–ø –∏–≥—Ä–æ–∫–æ–≤' },
    { command: 'rules', description: 'üìö –ü—Ä–∞–≤–∏–ª–∞ –∏–≥—Ä—ã' },
    { command: 'achievements', description: 'üèÖ –ú–æ–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è' }
]);

// Helper —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π
const safeEditMessage = async (ctx, text, options = {}) => {
    try {
        await ctx.editMessageText(text, options);
    } catch (error) {
        // –ï—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∞–µ—Ç—Å—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å (–º–µ–¥–∏–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ), –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ
        await ctx.reply(text, options);
    }
};

// URL Mini App
const MINI_APP_URL = process.env.MINI_APP_URL || process.env.FRONTEND_URL || 'https://eed58e0935c7.ngrok-free.app';

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–Ω–æ–ø–∫–∏ "Open" –≤ —Å–ø–∏—Å–∫–µ —á–∞—Ç–æ–≤ –¥–ª—è Web App
bot.telegram.setChatMenuButton({
    type: 'web_app',
    text: 'üéÆ –ò–ì–†–ê–¢–¨',
    web_app: { url: MINI_APP_URL }
}).then(() => {
    console.log('‚úÖ –ö–Ω–æ–ø–∫–∞ "–ò–ì–†–ê–¢–¨" —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –≤ –º–µ–Ω—é —á–∞—Ç–∞');
}).catch(err => {
    console.error('‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é:', err);
});

console.log('ü§ñ nFactorial Adventures Bot (Telegraf) started');
console.log('üîó Mini App URL:', MINI_APP_URL);

// Middleware –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
bot.use((ctx, next) => {
    const start = Date.now();
    return next().then(() => {
        const ms = Date.now() - start;
        console.log(`‚ö° ${ctx.updateType} from ${ctx.from?.username || ctx.from?.first_name} (${ms}ms)`);
    });
});

// ===== –ö–û–ú–ê–ù–î–´ –ë–û–¢–ê =====

// –ö–æ–º–∞–Ω–¥–∞ /start
bot.command('start', async (ctx) => {
    const welcomeMessage = `üéâ **–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ nFactorial Adventures!**

–≠—Ç–æ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–∞—è –∏–≥—Ä–∞ –ø—Ä–æ –∂–∏–∑–Ω—å –≤ –±—É—Ç–∫–µ–º–ø–µ nFactorial! 

üéØ **–¢–≤–æ—è —Ü–µ–ª—å:** –ü—Ä–æ–π—Ç–∏ –≤—Å–µ 10 –Ω–µ–¥–µ–ª—å –æ–±—É—á–µ–Ω–∏—è –∏ —Å—Ç–∞—Ç—å –∫—Ä—É—Ç—ã–º —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–º!

üéÆ **–ß—Ç–æ —Ç–µ–±—è –∂–¥–µ—Ç:**
‚Ä¢ –ò–∑—É—á–∞–π –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–º nFactorial  
‚Ä¢ –û–±—â–∞–π—Å—è —Å –º–µ–Ω—Ç–æ—Ä–∞–º–∏ –∏ —Å—Ç—É–¥–µ–Ω—Ç–∞–º–∏
‚Ä¢ –£–ø—Ä–∞–≤–ª—è–π —Ä–µ—Å—É—Ä—Å–∞–º–∏: –∫–æ—Ñ–µ ‚òï, –º–æ—Ç–∏–≤–∞—Ü–∏—è üí™, –∑–Ω–∞–Ω–∏—è üß†, —Å–æ–Ω üò¥
‚Ä¢ –í—ã–ø–æ–ª–Ω—è–π —Ä–µ–∞–ª—å–Ω—ã–µ –ø—Ä–æ–µ–∫—Ç—ã –∏ –∑–∞–¥–∞–Ω–∏—è
‚Ä¢ –°–æ—Ä–µ–≤–Ω—É–π—Å—è —Å –¥—Ä—É–≥–∏–º–∏ —Å—Ç—É–¥–µ–Ω—Ç–∞–º–∏

–ì–æ—Ç–æ–≤ –Ω–∞—á–∞—Ç—å —Å–≤–æ–µ –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏–µ? üöÄ`;

    const keyboard = Markup.inlineKeyboard([
        [Markup.button.webApp('üéÆ –ò–ì–†–ê–¢–¨', process.env.MINI_APP_URL || 'https://eed58e0935c7.ngrok-free.app')],
        [
            Markup.button.callback('üìö –ü—Ä–∞–≤–∏–ª–∞', 'rules'),
            Markup.button.callback('‚ùì –ü–æ–º–æ—â—å', 'help')
        ],
        [
            Markup.button.callback('üèÜ –¢–æ–ø –∏–≥—Ä–æ–∫–æ–≤', 'leaderboard'),
            Markup.button.callback('üèÖ –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è', 'achievements')
        ]
    ]);

    try {
        // –ü—Ä–æ–±—É–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å –∫–∞—Ä—Ç–∏–Ω–∫–æ–π
        await ctx.replyWithPhoto(
            { source: path.join(__dirname, 'public', 'nfact.png') },
            {
                caption: welcomeMessage,
                parse_mode: 'Markdown',
                reply_markup: keyboard.reply_markup
            }
        );
    } catch (error) {
        // –ï—Å–ª–∏ –∫–∞—Ä—Ç–∏–Ω–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç
        await ctx.reply(welcomeMessage, {
            parse_mode: 'Markdown',
            reply_markup: keyboard.reply_markup
        });
    }
});

// –ö–æ–º–∞–Ω–¥–∞ /help
bot.command('help', async (ctx) => {
    const helpMessage = `‚ùì **–ü–æ–º–æ—â—å –ø–æ nFactorial Adventures**

**–ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞:**
/start - –ù–∞—á–∞—Ç—å –∏–≥—Ä—É
/game - –û—Ç–∫—Ä—ã—Ç—å –∏–≥—Ä—É  
/help - –≠—Ç–∞ –ø–æ–º–æ—â—å
/stats - –¢–≤–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
/leaderboard - –¢–æ–ø –∏–≥—Ä–æ–∫–æ–≤
/rules - –ü—Ä–∞–≤–∏–ª–∞ –∏–≥—Ä—ã
/achievements - –¢–≤–æ–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è

**–ö–∞–∫ –∏–≥—Ä–∞—Ç—å:**
1. üëÄ **–û—Å–º–∞—Ç—Ä–∏–≤–∞–π—Å—è** - –∏–∑—É—á–∞–π –ª–æ–∫–∞—Ü–∏–∏
2. ü§è **–í–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤—É–π** - –∫–ª–∏–∫–∞–π –Ω–∞ –æ–±—ä–µ–∫—Ç—ã
3. üö∂ **–ü–µ—Ä–µ–º–µ—â–∞–π—Å—è** - —Ö–æ–¥–∏ –º–µ–∂–¥—É –ª–æ–∫–∞—Ü–∏—è–º–∏
4. ‚öñÔ∏è **–£–ø—Ä–∞–≤–ª—è–π —Ä–µ—Å—É—Ä—Å–∞–º–∏** - —Å–ª–µ–¥–∏ –∑–∞ –ø–æ–∫–∞–∑–∞—Ç–µ–ª—è–º–∏

**–†–µ—Å—É—Ä—Å—ã:**
‚òï **–ö–æ—Ñ–µ** - —ç–Ω–µ—Ä–≥–∏—è –¥–ª—è –∫–æ–¥–∏–Ω–≥–∞
üí™ **–ú–æ—Ç–∏–≤–∞—Ü–∏—è** - –∂–µ–ª–∞–Ω–∏–µ —É—á–∏—Ç—å—Å—è  
üß† **–ó–Ω–∞–Ω–∏—è** - —Ç–≤–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å
üò¥ **–°–æ–Ω** - –æ—Ç–¥—ã—Ö –∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ

**–õ–æ–∫–∞—Ü–∏–∏ nFactorial:**
üè´ –£—á–µ–±–Ω—ã–π –∫–ª–∞—Å—Å
üè¢ –ö–æ–≤–æ—Ä–∫–∏–Ω–≥ –∑–æ–Ω–∞
üåü –ì–ª–∞–≤–Ω—ã–π —Ö–æ–ª–ª
‚òï –ö–∞—Ñ–µ nFactorial

–£–¥–∞—á–∏ –≤ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–∏! üöÄ`;

    await ctx.reply(helpMessage, { parse_mode: 'Markdown' });
});

// –ö–æ–º–∞–Ω–¥–∞ /rules
bot.command('rules', async (ctx) => {
    const rulesMessage = `üìö **–ü—Ä–∞–≤–∏–ª–∞ –∏–≥—Ä—ã nFactorial Adventures**

**–¶–µ–ª—å:** –ü—Ä–æ–π—Ç–∏ –≤—Å–µ 10 –Ω–µ–¥–µ–ª—å bootcamp –∏ —Å—Ç–∞—Ç—å –∫—Ä—É—Ç—ã–º —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–º!

**–ü—Ä–∞–≤–∏–ª–∞:**
1. üìä –°–ª–µ–¥–∏ –∑–∞ —Ä–µ—Å—É—Ä—Å–∞–º–∏ - –Ω–µ –¥–∞–≤–∞–π –∏–º —É–ø–∞—Å—Ç—å –¥–æ –Ω—É–ª—è
2. ‚è∞ –£–ø—Ä–∞–≤–ª—è–π –≤—Ä–µ–º–µ–Ω–µ–º - –¥–µ–Ω—å, –≤–µ—á–µ—Ä, –Ω–æ—á—å –≤–ª–∏—è—é—Ç –Ω–∞ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å  
3. üéØ –í—ã–ø–æ–ª–Ω—è–π –∑–∞–¥–∞–Ω–∏—è –∏ –ø—Ä–æ–µ–∫—Ç—ã –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∑–Ω–∞–Ω–∏–π
4. ü§ù –û–±—â–∞–π—Å—è —Å –º–µ–Ω—Ç–æ—Ä–∞–º–∏ –¥–ª—è –º–æ—Ç–∏–≤–∞—Ü–∏–∏
5. ‚òï –ü–µ–π –∫–æ—Ñ–µ –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏—è —ç–Ω–µ—Ä–≥–∏–∏
6. üò¥ –û—Ç–¥—ã—Ö–∞–π –≤ –∫–∞—Ñ–µ –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è —Å–Ω–∞

**–ü–æ–±–µ–¥–∞:** –ó–∞–≤–µ—Ä—à–∏—Ç—å –≤—Å–µ 10 –Ω–µ–¥–µ–ª—å —Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–º–∏ –Ω–∞–≤—ã–∫–∞–º–∏!

**–®—Ç—Ä–∞—Ñ—ã:**
- –†–µ—Å—É—Ä—Å = 0 ‚Üí –≤—Ä–µ–º–µ–Ω–Ω–∞—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –¥–µ–π—Å—Ç–≤–∏–π
- –ü–ª–æ—Ö–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–µ–º ‚Üí —Å–Ω–∏–∂–µ–Ω–∏–µ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏

–£–¥–∞—á–∏, –±—É–¥—É—â–∏–π —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫! üíª`;

    await ctx.reply(rulesMessage, { parse_mode: 'Markdown' });
});

// –ö–æ–º–∞–Ω–¥–∞ /achievements
bot.command('achievements', async (ctx) => {
    try {
        const telegramId = ctx.from.id.toString();
        
        // –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –µ–≥–æ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
        const user = await User.findOne({ telegramId });
        
        if (!user) {
            const noUserMessage = `üèÖ **–î–æ—Å—Ç–∏–∂–µ–Ω–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã**

‚ùå –°–Ω–∞—á–∞–ª–∞ –Ω—É–∂–Ω–æ –≤–æ–π—Ç–∏ –≤ –∏–≥—Ä—É!

üí° –ù–∞–∂–º–∏—Ç–µ "–ò–≥—Ä–∞—Ç—å" —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –∞–∫–∫–∞—É–Ω—Ç –∏ –Ω–∞—á–∞—Ç—å —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è.`;

            const keyboard = Markup.inlineKeyboard([
                [Markup.button.webApp('üéÆ –ù–∞—á–∞—Ç—å –∏–≥—Ä—É!', MINI_APP_URL)]
            ]);

            return await ctx.reply(noUserMessage, {
                parse_mode: 'Markdown',
                ...keyboard
            });
        }

        // –ü–æ–ª—É—á–∞–µ–º DOOM —Å–µ—Å—Å–∏—é –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ—Å—Ç—ã—Ö –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
        const doomSession = await DoomSession.findOne({ userId: user._id });
        
        // –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
        const globalAchievements = user.achievementsUnlocked || [];
        const doomAchievements = doomSession?.achievements || [];
        const totalUnlocked = globalAchievements.length + doomAchievements.length;

        let achievementsText = `üèÖ **–î–æ—Å—Ç–∏–∂–µ–Ω–∏—è ${user.username || user.firstName}**\n\n`;

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ DOOM –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
        if (doomAchievements.length > 0) {
            achievementsText += `‚úÖ **–†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ (DOOM):**\n`;
            doomAchievements.forEach(achievement => {
                const date = achievement.unlockedAt?.toLocaleDateString('ru-RU') || '–Ω–µ–¥–∞–≤–Ω–æ';
                achievementsText += `‚Ä¢ üèÜ **${achievement.name}** (${date})\n`;
            });
            achievementsText += `\n`;
        }

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
        if (globalAchievements.length > 0) {
            achievementsText += `‚úÖ **–ì–ª–æ–±–∞–ª—å–Ω—ã–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è:**\n`;
            globalAchievements.forEach(achievement => {
                achievementsText += `‚Ä¢ ‚≠ê **${achievement.name || achievement.id}**\n`;
            });
            achievementsText += `\n`;
        }

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –¥–ª—è —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
        achievementsText += `üîí **–î–æ—Å—Ç—É–ø–Ω—ã–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è:**\n`;
        
        // DOOM –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
        const enemiesKilled = doomSession ? Object.values(doomSession.enemiesKilled).reduce((a, b) => a + b, 0) : 0;
        const itemsCollected = doomSession ? Object.values(doomSession.itemsCollected).reduce((a, b) => a + b, 0) : 0;
        
        if (enemiesKilled < 10) {
            achievementsText += `‚Ä¢ ‚öîÔ∏è –ü–µ—Ä–≤—ã–π –æ—Ö–æ—Ç–Ω–∏–∫ - –£–±–µ–π 10 –≤—Ä–∞–≥–æ–≤ (${enemiesKilled}/10)\n`;
        }
        if (!doomAchievements.find(a => a.id === 'bug_destroyer')) {
            const bugKills = doomSession?.enemiesKilled?.bug || 0;
            achievementsText += `‚Ä¢ üêõ –ò—Å—Ç—Ä–µ–±–∏—Ç–µ–ª—å –±–∞–≥–æ–≤ - –£–±–µ–π 5 –±–∞–≥–æ–≤ (${bugKills}/5)\n`;
        }
        if (!doomAchievements.find(a => a.id === 'collector')) {
            achievementsText += `‚Ä¢ üì¶ –ö–æ–ª–ª–µ–∫—Ü–∏–æ–Ω–µ—Ä - –°–æ–±–µ—Ä–∏ 5 –ø—Ä–µ–¥–º–µ—Ç–æ–≤ (${itemsCollected}/5)\n`;
        }
        if (user.currentWeek < 1) {
            achievementsText += `‚Ä¢ üìÖ –ü–µ—Ä–≤–∞—è –Ω–µ–¥–µ–ª—è - –ó–∞–≤–µ—Ä—à–∏—Ç—å –Ω–µ–¥–µ–ª—é 1\n`;
        }
        if (user.level < 5) {
            achievementsText += `‚Ä¢ üöÄ –ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π - –î–æ—Å—Ç–∏—á—å 5 —É—Ä–æ–≤–Ω—è (${user.level}/5)\n`;
        }
        if (user.level < 10) {
            achievementsText += `‚Ä¢ ‚≠ê –≠–∫—Å–ø–µ—Ä—Ç - –î–æ—Å—Ç–∏—á—å 10 —É—Ä–æ–≤–Ω—è (${user.level}/10)\n`;
        }

        achievementsText += `\nüìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:** ${totalUnlocked} –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ\n\n`;
        achievementsText += `üí° –ü—Ä–æ–¥–æ–ª–∂–∞–π –∏–≥—Ä–∞—Ç—å –≤ DOOM —á—Ç–æ–±—ã —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –±–æ–ª—å—à–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π!`;

        const keyboard = Markup.inlineKeyboard([
            [Markup.button.webApp('üéØ –ó–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è–º–∏!', MINI_APP_URL)]
        ]);

        await ctx.reply(achievementsText, {
            parse_mode: 'Markdown',
            ...keyboard
        });

    } catch (error) {
        console.error('‚ùå Achievements command error:', error);
        await ctx.reply('üòì –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    }
});

// –ö–æ–º–∞–Ω–¥–∞ /game
bot.command('game', async (ctx) => {
    const gameMessage = `üéÆ **nFactorial Adventures**

–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:`;

    const keyboard = Markup.inlineKeyboard([
        [Markup.button.webApp('üöÄ –ò–≥—Ä–∞—Ç—å —Å–µ–π—á–∞—Å!', MINI_APP_URL)],
        [
            Markup.button.callback('üìä –ú–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', 'stats'),
            Markup.button.callback('üèÜ –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è', 'achievements')
        ]
    ]);

    try {
        await ctx.replyWithPhoto(
            { source: './nfact.png' },
            {
                caption: gameMessage,
                parse_mode: 'Markdown',
                ...keyboard
            }
        );
    } catch (error) {
        console.error('‚ùå Error sending photo:', error);
        await ctx.reply(gameMessage, {
            parse_mode: 'Markdown',
            ...keyboard
        });
    }
});

// –ö–æ–º–∞–Ω–¥–∞ /stats
bot.command('stats', async (ctx) => {
    try {
        const telegramId = ctx.from.id.toString();
        
        // –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã
        const user = await User.findOne({ telegramId });
        
        if (!user) {
            const noUserMessage = `üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞**

‚ùå –°–Ω–∞—á–∞–ª–∞ –Ω—É–∂–Ω–æ –≤–æ–π—Ç–∏ –≤ –∏–≥—Ä—É!

üí° –ù–∞–∂–º–∏—Ç–µ "–ò–≥—Ä–∞—Ç—å" —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –∞–∫–∫–∞—É–Ω—Ç.`;

            const keyboard = Markup.inlineKeyboard([
                [Markup.button.webApp('üéÆ –ù–∞—á–∞—Ç—å –∏–≥—Ä–∞—Ç—å!', MINI_APP_URL)]
            ]);

            return await ctx.reply(noUserMessage, {
                parse_mode: 'Markdown',
                ...keyboard
            });
        }

        // –ü–æ–ª—É—á–∞–µ–º DOOM —Å–µ—Å—Å–∏—é
        const doomSession = await DoomSession.findOne({ userId: user._id });
        const gameSession = await GameSession.findOne({ userId: user._id });

        // –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        const totalEnemiesKilled = doomSession ? 
            Object.values(doomSession.enemiesKilled).reduce((a, b) => a + b, 0) : 0;
        const totalItemsCollected = doomSession ?
            Object.values(doomSession.itemsCollected).reduce((a, b) => a + b, 0) : 0;
        const playTimeMinutes = doomSession ?
            Math.floor(doomSession.stats.totalPlayTime / 60) : 0;
        const achievementsCount = (user.achievementsUnlocked?.length || 0) + 
                                 (doomSession?.achievements?.length || 0);

        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–∞–Ω–≥
        const getRank = (level) => {
            if (level >= 20) return 'üëë –õ–µ–≥–µ–Ω–¥–∞ nFactorial';
            if (level >= 15) return 'üèÜ –ú–∞—Å—Ç–µ—Ä';
            if (level >= 10) return '‚≠ê –≠–∫—Å–ø–µ—Ä—Ç';
            if (level >= 5) return 'üöÄ –ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π';
            return 'üå± –ù–æ–≤–∏—á–æ–∫';
        };

        const statsMessage = `üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ ${user.username || user.firstName}**

üéÆ **–û–±—â–∏–π –ø—Ä–æ–≥—Ä–µ—Å—Å:**
‚Ä¢ –£—Ä–æ–≤–µ–Ω—å: ${user.level}/50
‚Ä¢ –û–ø—ã—Ç: ${user.experience}
‚Ä¢ –û—á–∫–∏: ${user.score?.total || 0}
‚Ä¢ –ù–µ–¥–µ–ª—è: ${user.currentWeek}/10

‚öîÔ∏è **DOOM —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:**
‚Ä¢ –í—Ä–∞–≥–æ–≤ —É–±–∏—Ç–æ: ${totalEnemiesKilled}
‚Ä¢ –ü—Ä–µ–¥–º–µ—Ç–æ–≤ —Å–æ–±—Ä–∞–Ω–æ: ${totalItemsCollected}
‚Ä¢ –í—Ä–µ–º—è –≤ –∏–≥—Ä–µ: ${playTimeMinutes} –º–∏–Ω
‚Ä¢ –î–æ—Å—Ç–∏–∂–µ–Ω–∏–π: ${achievementsCount}

üèÖ **–¢–≤–æ–π —Ä–∞–Ω–≥:** ${getRank(user.level)}

üìÖ –°–æ–∑–¥–∞–Ω: ${user.createdAt?.toLocaleDateString('ru-RU') || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}
üïê –ü–æ—Å–ª–µ–¥–Ω–∏–π –≤—Ö–æ–¥: ${user.lastPlayed?.toLocaleDateString('ru-RU') || '–°–µ–≥–æ–¥–Ω—è'}`;

    const keyboard = Markup.inlineKeyboard([
            [Markup.button.webApp('üéÆ –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∏–≥—Ä–∞—Ç—å!', MINI_APP_URL)]
    ]);

    await ctx.reply(statsMessage, {
        parse_mode: 'Markdown',
        ...keyboard
    });

    } catch (error) {
        console.error('‚ùå Stats command error:', error);
        await ctx.reply('üòì –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    }
});

// –ö–æ–º–∞–Ω–¥–∞ /leaderboard
bot.command('leaderboard', async (ctx) => {
    try {
        // –ü–æ–ª—É—á–∞–µ–º —Ç–æ–ø-5 –∏–≥—Ä–æ–∫–æ–≤ –∏–∑ –±–∞–∑—ã
        const topPlayers = await User.aggregate([
            {
                $lookup: {
                    from: 'gamesessions',
                    localField: 'telegramId',
                    foreignField: 'telegramId',
                    as: 'sessions'
                }
            },
            {
                $addFields: {
                    totalScore: { $sum: '$sessions.stats.totalScore' },
                    totalAchievements: { $size: '$achievementsUnlocked' }
                }
            },
            {
                $sort: { 
                    level: -1, 
                    experience: -1, 
                    totalScore: -1,
                    totalAchievements: -1
                }
            },
            {
                $limit: 5
            },
            {
                $project: {
                    username: 1,
                    firstName: 1,
                    level: 1,
                    experience: 1,
                    totalScore: 1,
                    totalAchievements: 1,
                    currentWeek: 1
                }
            }
        ]);

        let leaderboardText = 'üèÜ **–¢–æ–ø –∏–≥—Ä–æ–∫–æ–≤ nFactorial Adventures**\n\n';

        if (topPlayers.length === 0) {
            leaderboardText += 'ü§∑‚Äç‚ôÇÔ∏è –ü–æ–∫–∞ –Ω–∏–∫–æ–≥–æ –Ω–µ—Ç –≤ —Ä–µ–π—Ç–∏–Ω–≥–µ!\n\n*–°—Ç–∞–Ω—å –ø–µ—Ä–≤—ã–º! –ù–∞—á–Ω–∏ –∏–≥—Ä–∞—Ç—å.*';
        } else {
            const medals = ['üëë', 'ü•à', 'ü•â', 'üèÖ', 'üèÖ'];
            
            topPlayers.forEach((player, index) => {
                const name = player.username || player.firstName || '–ê–Ω–æ–Ω–∏–º–Ω—ã–π –∏–≥—Ä–æ–∫';
                const medal = medals[index] || 'üèÖ';
                const level = player.level || 1;
                const exp = player.experience || 0;
                const score = player.totalScore || 0;
                const achievements = player.totalAchievements || 0;
                
                leaderboardText += `${index + 1}. ${medal} **${name}**\n`;
                leaderboardText += `    üìä –£—Ä–æ–≤–µ–Ω—å ${level} ‚Ä¢ ${exp} –æ–ø—ã—Ç–∞\n`;
                leaderboardText += `    üéØ ${score} –æ—á–∫–æ–≤ ‚Ä¢ üèÜ ${achievements} –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π\n\n`;
            });
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–∑–∏—Ü–∏—é —Ç–µ–∫—É—â–µ–≥–æ –∏–≥—Ä–æ–∫–∞
        const currentUser = await User.findOne({ telegramId: ctx.from.id.toString() });
        if (currentUser) {
            const allPlayers = await User.countDocuments();
            const betterPlayers = await User.countDocuments({
                $or: [
                    { level: { $gt: currentUser.level } },
                    { 
                        level: currentUser.level, 
                        experience: { $gt: currentUser.experience } 
                    }
                ]
            });
            const userPosition = betterPlayers + 1;
            
            leaderboardText += `üìç **–¢–≤–æ—è –ø–æ–∑–∏—Ü–∏—è:** ${userPosition}/${allPlayers}\n\n`;
        }

        leaderboardText += `üí° **–ö–∞–∫ –ø–æ–¥–Ω—è—Ç—å—Å—è –≤ —Ä–µ–π—Ç–∏–Ω–≥–µ:**\n`;
        leaderboardText += `‚Ä¢ ‚öîÔ∏è –£–±–∏–≤–∞–π –≤—Ä–∞–≥–æ–≤ –≤ DOOM (+10 –æ–ø—ã—Ç–∞)\n`;
        leaderboardText += `‚Ä¢ üí¨ –û–±—â–∞–π—Å—è —Å NPC (+5-15 –æ–ø—ã—Ç–∞)\n`;
        leaderboardText += `‚Ä¢ üì¶ –°–æ–±–∏—Ä–∞–π –ø—Ä–µ–¥–º–µ—Ç—ã\n`;
        leaderboardText += `‚Ä¢ üèÜ –†–∞–∑–±–ª–æ–∫–∏—Ä—É–π –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è\n`;
        leaderboardText += `‚Ä¢ üéØ –ó–∞–≤–µ—Ä—à–∞–π –Ω–µ–¥–µ–ª–∏ DOOM`;

    const keyboard = Markup.inlineKeyboard([
        [Markup.button.webApp('üöÄ –ü–æ–¥–Ω—è—Ç—å—Å—è –≤ —Ä–µ–π—Ç–∏–Ω–≥–µ!', MINI_APP_URL)]
    ]);

        await ctx.reply(leaderboardText, {
        parse_mode: 'Markdown',
        ...keyboard
    });

    } catch (error) {
        console.error('‚ùå Leaderboard command error:', error);
        await ctx.reply('üòì –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–π—Ç–∏–Ω–≥–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    }
});

// ===== CALLBACK HANDLERS =====

// –ü—Ä–∞–≤–∏–ª–∞ –∏–≥—Ä—ã
bot.action('rules', async (ctx) => {
    const rulesMessage = `üìö **–ü—Ä–∞–≤–∏–ª–∞ –∏–≥—Ä—ã nFactorial Adventures**

**–¶–µ–ª—å:** –ü—Ä–æ–π—Ç–∏ –≤—Å–µ 10 –Ω–µ–¥–µ–ª—å bootcamp –∏ —Å—Ç–∞—Ç—å –∫—Ä—É—Ç—ã–º —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–º!

**–ü—Ä–∞–≤–∏–ª–∞:**
1. üìä –°–ª–µ–¥–∏ –∑–∞ —Ä–µ—Å—É—Ä—Å–∞–º–∏ - –Ω–µ –¥–∞–≤–∞–π –∏–º —É–ø–∞—Å—Ç—å –¥–æ –Ω—É–ª—è
2. ‚è∞ –£–ø—Ä–∞–≤–ª—è–π –≤—Ä–µ–º–µ–Ω–µ–º - –¥–µ–Ω—å, –≤–µ—á–µ—Ä, –Ω–æ—á—å –≤–ª–∏—è—é—Ç –Ω–∞ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å  
3. üéØ –í—ã–ø–æ–ª–Ω—è–π –∑–∞–¥–∞–Ω–∏—è –∏ –ø—Ä–æ–µ–∫—Ç—ã –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∑–Ω–∞–Ω–∏–π
4. ü§ù –û–±—â–∞–π—Å—è —Å –º–µ–Ω—Ç–æ—Ä–∞–º–∏ –¥–ª—è –º–æ—Ç–∏–≤–∞—Ü–∏–∏
5. ‚òï –ü–µ–π –∫–æ—Ñ–µ –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏—è —ç–Ω–µ—Ä–≥–∏–∏
6. üò¥ –û—Ç–¥—ã—Ö–∞–π –≤ –∫–∞—Ñ–µ –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è —Å–Ω–∞

**–ü–æ–±–µ–¥–∞:** –ó–∞–≤–µ—Ä—à–∏—Ç—å –≤—Å–µ 10 –Ω–µ–¥–µ–ª—å —Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–º–∏ –Ω–∞–≤—ã–∫–∞–º–∏!

**–®—Ç—Ä–∞—Ñ—ã:**
- –†–µ—Å—É—Ä—Å = 0 ‚Üí –≤—Ä–µ–º–µ–Ω–Ω–∞—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –¥–µ–π—Å—Ç–≤–∏–π
- –ü–ª–æ—Ö–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–µ–º ‚Üí —Å–Ω–∏–∂–µ–Ω–∏–µ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏

–£–¥–∞—á–∏, –±—É–¥—É—â–∏–π —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫! üíª`;

    await safeEditMessage(ctx, rulesMessage, { parse_mode: 'Markdown' });
});

// –õ–∏–¥–µ—Ä–±–æ—Ä–¥
bot.action('leaderboard', async (ctx) => {
    await ctx.answerCbQuery('üèÜ –û—Ç–∫—Ä—ã–≤–∞—é –ª–∏–¥–µ—Ä–±–æ—Ä–¥...');
    
    try {
        // –ü–æ–ª—É—á–∞–µ–º —Ç–æ–ø-3 –∏–≥—Ä–æ–∫–æ–≤ –∏–∑ –±–∞–∑—ã (–¥–ª—è –∫–æ–º–ø–∞–∫—Ç–Ω–æ—Å—Ç–∏)
        const topPlayers = await User.aggregate([
            {
                $lookup: {
                    from: 'gamesessions',
                    localField: 'telegramId',
                    foreignField: 'telegramId',
                    as: 'sessions'
                }
            },
            {
                $addFields: {
                    totalScore: { $sum: '$sessions.stats.totalScore' },
                    totalAchievements: { $size: '$achievementsUnlocked' }
                }
            },
            {
                $sort: { 
                    level: -1, 
                    experience: -1, 
                    totalScore: -1
                }
            },
            {
                $limit: 3
            },
            {
                $project: {
                    username: 1,
                    firstName: 1,
                    level: 1,
                    experience: 1,
                    totalScore: 1,
                    totalAchievements: 1
                }
            }
        ]);

        let leaderboardText = 'üèÜ **–¢–æ–ø –∏–≥—Ä–æ–∫–æ–≤ nFactorial Adventures**\n\n';

        if (topPlayers.length === 0) {
            leaderboardText += 'ü§∑‚Äç‚ôÇÔ∏è –ü–æ–∫–∞ –Ω–∏–∫–æ–≥–æ –Ω–µ—Ç –≤ —Ä–µ–π—Ç–∏–Ω–≥–µ!\n\n*–°—Ç–∞–Ω—å –ø–µ—Ä–≤—ã–º!*';
        } else {
            const medals = ['üëë', 'ü•à', 'ü•â'];
            
            topPlayers.forEach((player, index) => {
                const name = player.username || player.firstName || '–ê–Ω–æ–Ω–∏–º–Ω—ã–π –∏–≥—Ä–æ–∫';
                const medal = medals[index];
                const level = player.level || 1;
                const exp = player.experience || 0;
                
                leaderboardText += `${index + 1}. ${medal} **${name}**\n`;
                leaderboardText += `    –£—Ä–æ–≤–µ–Ω—å ${level} ‚Ä¢ ${exp} –æ–ø—ã—Ç–∞\n\n`;
            });
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–∑–∏—Ü–∏—é —Ç–µ–∫—É—â–µ–≥–æ –∏–≥—Ä–æ–∫–∞
        const currentUser = await User.findOne({ telegramId: ctx.from.id.toString() });
        if (currentUser) {
            const betterPlayers = await User.countDocuments({
                $or: [
                    { level: { $gt: currentUser.level } },
                    { 
                        level: currentUser.level, 
                        experience: { $gt: currentUser.experience } 
                    }
                ]
            });
            const userPosition = betterPlayers + 1;
            leaderboardText += `üìç **–¢–≤–æ—è –ø–æ–∑–∏—Ü–∏—è:** ${userPosition}\n\n`;
        }

        leaderboardText += `üí° **–ü–æ–¥–Ω–∏–º–∞–π—Å—è –≤ —Ä–µ–π—Ç–∏–Ω–≥–µ:**\n`;
        leaderboardText += `‚Ä¢ ‚öîÔ∏è –£–±–∏–≤–∞–π –≤—Ä–∞–≥–æ–≤ –≤ DOOM\n`;
        leaderboardText += `‚Ä¢ üí¨ –û–±—â–∞–π—Å—è —Å NPC\n`;
        leaderboardText += `‚Ä¢ üèÜ –°–æ–±–∏—Ä–∞–π –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è`;

        await safeEditMessage(ctx, leaderboardText, {
        parse_mode: 'Markdown',
        reply_markup: Markup.inlineKeyboard([
                [Markup.button.webApp('üéÆ –ò–≥—Ä–∞—Ç—å', MINI_APP_URL)],
            [Markup.button.callback('üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', 'main_menu')]
        ])
    });

    } catch (error) {
        console.error('‚ùå Leaderboard callback error:', error);
        await ctx.answerCbQuery('üòì –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–µ–π—Ç–∏–Ω–≥–∞');
    }
});

// –ü–æ–º–æ—â—å
bot.action('help', async (ctx) => {
    await ctx.answerCbQuery('‚ùì –û—Ç–∫—Ä—ã–≤–∞—é –ø–æ–º–æ—â—å...');
    
    const helpMessage = `‚ùì **–ü–æ–º–æ—â—å –ø–æ nFactorial Adventures**

**–ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞:**
/start - –ù–∞—á–∞—Ç—å –∏–≥—Ä—É
/game - –û—Ç–∫—Ä—ã—Ç—å –∏–≥—Ä—É  
/help - –≠—Ç–∞ –ø–æ–º–æ—â—å
/stats - –¢–≤–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
/leaderboard - –¢–æ–ø –∏–≥—Ä–æ–∫–æ–≤

**–ö–∞–∫ –∏–≥—Ä–∞—Ç—å:**
1. üëÄ **–û—Å–º–∞—Ç—Ä–∏–≤–∞–π—Å—è** - –∏–∑—É—á–∞–π –ª–æ–∫–∞—Ü–∏–∏
2. ü§è **–í–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤—É–π** - –∫–ª–∏–∫–∞–π –Ω–∞ –æ–±—ä–µ–∫—Ç—ã
3. üö∂ **–ü–µ—Ä–µ–º–µ—â–∞–π—Å—è** - —Ö–æ–¥–∏ –º–µ–∂–¥—É –ª–æ–∫–∞—Ü–∏—è–º–∏
4. ‚öñÔ∏è **–£–ø—Ä–∞–≤–ª—è–π —Ä–µ—Å—É—Ä—Å–∞–º–∏** - —Å–ª–µ–¥–∏ –∑–∞ –ø–æ–∫–∞–∑–∞—Ç–µ–ª—è–º–∏

**–†–µ—Å—É—Ä—Å—ã:**
‚òï **–ö–æ—Ñ–µ** - —ç–Ω–µ—Ä–≥–∏—è –¥–ª—è –∫–æ–¥–∏–Ω–≥–∞
üí™ **–ú–æ—Ç–∏–≤–∞—Ü–∏—è** - –∂–µ–ª–∞–Ω–∏–µ —É—á–∏—Ç—å—Å—è  
üß† **–ó–Ω–∞–Ω–∏—è** - —Ç–≤–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å
üò¥ **–°–æ–Ω** - –æ—Ç–¥—ã—Ö –∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ

**–õ–æ–∫–∞—Ü–∏–∏ nFactorial:**
üè´ –£—á–µ–±–Ω—ã–π –∫–ª–∞—Å—Å
üè¢ –ö–æ–≤–æ—Ä–∫–∏–Ω–≥ –∑–æ–Ω–∞
üåü –ì–ª–∞–≤–Ω—ã–π —Ö–æ–ª–ª
‚òï –ö–∞—Ñ–µ nFactorial

–£–¥–∞—á–∏ –≤ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–∏! üöÄ`;

    await safeEditMessage(ctx, helpMessage, { parse_mode: 'Markdown' });
});

// –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
bot.action('stats', async (ctx) => {
    await ctx.answerCbQuery('üìä –ó–∞–≥—Ä—É–∂–∞—é —Ç–≤–æ—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É...');
    
    try {
        const telegramId = ctx.from.id.toString();
        
        // –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã
        const user = await User.findOne({ telegramId });
        
        if (!user) {
            const noUserMessage = `üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞**

‚ùå –°–Ω–∞—á–∞–ª–∞ –Ω—É–∂–Ω–æ –≤–æ–π—Ç–∏ –≤ –∏–≥—Ä—É!

üí° –ù–∞–∂–º–∏—Ç–µ "–ò–≥—Ä–∞—Ç—å" —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –∞–∫–∫–∞—É–Ω—Ç.`;

            const keyboard = Markup.inlineKeyboard([
                [Markup.button.webApp('üéÆ –ù–∞—á–∞—Ç—å –∏–≥—Ä–∞—Ç—å!', MINI_APP_URL)]
            ]);

            return await safeEditMessage(ctx, noUserMessage, {
                parse_mode: 'Markdown',
                ...keyboard
            });
        }

        // –ü–æ–ª—É—á–∞–µ–º DOOM —Å–µ—Å—Å–∏—é
        const doomSession = await DoomSession.findOne({ userId: user._id });

        // –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        const totalEnemiesKilled = doomSession ? 
            Object.values(doomSession.enemiesKilled).reduce((a, b) => a + b, 0) : 0;
        const playTimeMinutes = doomSession ?
            Math.floor(doomSession.stats.totalPlayTime / 60) : 0;
        const achievementsCount = (user.achievementsUnlocked?.length || 0) + 
                                 (doomSession?.achievements?.length || 0);

        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–∞–Ω–≥
        const getRank = (level) => {
            if (level >= 20) return 'üëë –õ–µ–≥–µ–Ω–¥–∞';
            if (level >= 15) return 'üèÜ –ú–∞—Å—Ç–µ—Ä';
            if (level >= 10) return '‚≠ê –≠–∫—Å–ø–µ—Ä—Ç';
            if (level >= 5) return 'üöÄ –ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π';
            return 'üå± –ù–æ–≤–∏—á–æ–∫';
        };

        const statsMessage = `üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ ${user.username || user.firstName}**

üéÆ **–ü—Ä–æ–≥—Ä–µ—Å—Å:**
‚Ä¢ –£—Ä–æ–≤–µ–Ω—å: ${user.level}/50
‚Ä¢ –û–ø—ã—Ç: ${user.experience}
‚Ä¢ –ù–µ–¥–µ–ª—è: ${user.currentWeek}/10

‚öîÔ∏è **DOOM:**
‚Ä¢ –í—Ä–∞–≥–æ–≤ —É–±–∏—Ç–æ: ${totalEnemiesKilled}
‚Ä¢ –í—Ä–µ–º—è –≤ –∏–≥—Ä–µ: ${playTimeMinutes} –º–∏–Ω
‚Ä¢ –î–æ—Å—Ç–∏–∂–µ–Ω–∏–π: ${achievementsCount}

üèÖ **–†–∞–Ω–≥:** ${getRank(user.level)}

üìÖ –í –∏–≥—Ä–µ —Å: ${user.createdAt?.toLocaleDateString('ru-RU') || '–Ω–µ–¥–∞–≤–Ω–æ'}`;

    const keyboard = Markup.inlineKeyboard([
            [Markup.button.webApp('üéÆ –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∏–≥—Ä—É!', MINI_APP_URL)]
    ]);

    await safeEditMessage(ctx, statsMessage, {
        parse_mode: 'Markdown',
        ...keyboard
    });

    } catch (error) {
        console.error('‚ùå Stats callback error:', error);
        await ctx.answerCbQuery('üòì –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏');
    }
});

// –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è
bot.action('achievements', async (ctx) => {
    await ctx.answerCbQuery('üèÜ –ó–∞–≥—Ä—É–∂–∞—é –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è...');
    
    try {
        const telegramId = ctx.from.id.toString();
        
        // –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –µ–≥–æ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
        const user = await User.findOne({ telegramId });
        
        if (!user) {
            const noUserMessage = `üèÜ **–î–æ—Å—Ç–∏–∂–µ–Ω–∏—è nFactorial Adventures**

‚ùå –î–∞–Ω–Ω—ã–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã - –Ω—É–∂–Ω–æ –≤–æ–π—Ç–∏ –≤ –∏–≥—Ä—É!

üéÆ –ù–∞–∂–º–∏—Ç–µ "–ò–≥—Ä–∞—Ç—å" —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –∞–∫–∫–∞—É–Ω—Ç.`;

            const keyboard = Markup.inlineKeyboard([
                [Markup.button.webApp('üéÆ –ù–∞—á–∞—Ç—å –∏–≥—Ä—É!', MINI_APP_URL)]
            ]);

            return await safeEditMessage(ctx, noUserMessage, {
                parse_mode: 'Markdown',
                ...keyboard
            });
        }

        // –ü–æ–ª—É—á–∞–µ–º DOOM —Å–µ—Å—Å–∏—é
        const doomSession = await DoomSession.findOne({ userId: user._id });
        
        // –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–ª—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
        const enemiesKilled = doomSession ? Object.values(doomSession.enemiesKilled).reduce((a, b) => a + b, 0) : 0;
        const itemsCollected = doomSession ? Object.values(doomSession.itemsCollected).reduce((a, b) => a + b, 0) : 0;
        const doomAchievements = doomSession?.achievements || [];
        const globalAchievements = user.achievementsUnlocked || [];
        const totalUnlocked = doomAchievements.length + globalAchievements.length;

        let achievementsText = `üèÜ **–î–æ—Å—Ç–∏–∂–µ–Ω–∏—è ${user.username || user.firstName}**\n\n`;

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
        achievementsText += `üìä **–¢–≤–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å:** ${totalUnlocked} —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ\n\n`;

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
        achievementsText += `üå± **–ü–µ—Ä–≤—ã–µ —à–∞–≥–∏ (DOOM):**\n`;
        if (doomAchievements.find(a => a.id === 'first_kill')) {
            achievementsText += `‚úÖ –ü–µ—Ä–≤–æ–µ —É–±–∏–π—Å—Ç–≤–æ\n`;
        } else {
            achievementsText += `üîí –ü–µ—Ä–≤–æ–µ —É–±–∏–π—Å—Ç–≤–æ - –£–±–µ–π –ø–µ—Ä–≤–æ–≥–æ –≤—Ä–∞–≥–∞\n`;
        }

        if (doomAchievements.find(a => a.id === 'collector')) {
            achievementsText += `‚úÖ –ö–æ–ª–ª–µ–∫—Ü–∏–æ–Ω–µ—Ä\n`;
        } else {
            achievementsText += `üîí –ö–æ–ª–ª–µ–∫—Ü–∏–æ–Ω–µ—Ä - –°–æ–±–µ—Ä–∏ 5 –ø—Ä–µ–¥–º–µ—Ç–æ–≤ (${itemsCollected}/5)\n`;
        }

        achievementsText += `\n‚öîÔ∏è **–ë–æ–µ–≤—ã–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è:**\n`;
        if (doomAchievements.find(a => a.id === 'bug_destroyer')) {
            achievementsText += `‚úÖ –ò—Å—Ç—Ä–µ–±–∏—Ç–µ–ª—å –±–∞–≥–æ–≤\n`;
        } else {
            const bugKills = doomSession?.enemiesKilled?.bug || 0;
            achievementsText += `üîí –ò—Å—Ç—Ä–µ–±–∏—Ç–µ–ª—å –±–∞–≥–æ–≤ - –£–±–µ–π 5 –±–∞–≥–æ–≤ (${bugKills}/5)\n`;
        }

        if (enemiesKilled >= 10) {
            achievementsText += `‚úÖ –ü–µ—Ä–≤—ã–π –æ—Ö–æ—Ç–Ω–∏–∫\n`;
        } else {
            achievementsText += `üîí –ü–µ—Ä–≤—ã–π –æ—Ö–æ—Ç–Ω–∏–∫ - –£–±–µ–π 10 –≤—Ä–∞–≥–æ–≤ (${enemiesKilled}/10)\n`;
        }

        achievementsText += `\nüöÄ **–ü—Ä–æ–≥—Ä–µ—Å—Å –∏–≥—Ä–æ–∫–∞:**\n`;
        if (user.level >= 5) {
            achievementsText += `‚úÖ –ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π (—É—Ä–æ–≤–µ–Ω—å 5+)\n`;
        } else {
            achievementsText += `üîí –ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π - –î–æ—Å—Ç–∏—á—å 5 —É—Ä–æ–≤–Ω—è (${user.level}/5)\n`;
        }

        if (user.level >= 10) {
            achievementsText += `‚úÖ –≠–∫—Å–ø–µ—Ä—Ç (—É—Ä–æ–≤–µ–Ω—å 10+)\n`;
        } else {
            achievementsText += `üîí –≠–∫—Å–ø–µ—Ä—Ç - –î–æ—Å—Ç–∏—á—å 10 —É—Ä–æ–≤–Ω—è (${user.level}/10)\n`;
        }

        achievementsText += `\nüéØ –ò–≥—Ä–∞–π –≤ DOOM, —á—Ç–æ–±—ã —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –±–æ–ª—å—à–µ!`;

        const keyboard = Markup.inlineKeyboard([
            [Markup.button.webApp('üéØ –ó–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è–º–∏!', MINI_APP_URL)]
        ]);

        await safeEditMessage(ctx, achievementsText, {
            parse_mode: 'Markdown',
            ...keyboard
        });

    } catch (error) {
        console.error('‚ùå Achievements callback error:', error);
        await ctx.answerCbQuery('üòì –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π');
    }
});

// –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
bot.action('main_menu', async (ctx) => {
    await ctx.answerCbQuery('üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é');
    
    const welcomeMessage = `üéÆ **nFactorial Adventures**

–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∏–≥—Ä—É –ø—Ä–æ –∂–∏–∑–Ω—å –≤ –±—É—Ç–∫–µ–º–ø–µ nFactorial!

üéØ –í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:`;

    const keyboard = Markup.inlineKeyboard([
        [Markup.button.webApp('üéÆ –ò–ì–†–ê–¢–¨', MINI_APP_URL)],
        [
            Markup.button.callback('üìä –ú–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', 'stats'),
            Markup.button.callback('üèÜ –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è', 'achievements')
        ],
        [
            Markup.button.callback('üèÜ –õ–∏–¥–µ—Ä–±–æ—Ä–¥', 'leaderboard'),
            Markup.button.callback('‚ùì –ü–æ–º–æ—â—å', 'help')
        ]
    ]);

    await safeEditMessage(ctx, welcomeMessage, {
        parse_mode: 'Markdown',
        reply_markup: keyboard.reply_markup
    });
});

// ===== –¢–ï–ö–°–¢–û–í–´–ï –°–û–û–ë–©–ï–ù–ò–Ø =====

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±—ã—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
bot.on('text', async (ctx) => {
    const text = ctx.message.text;
    
    // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—ã
    if (text.startsWith('/')) return;
    
    const responses = [
        'üéÆ –ì–æ—Ç–æ–≤ –∏–≥—Ä–∞—Ç—å –≤ nFactorial Adventures? –ù–∞–∂–º–∏ /game',
        'üíª –•–æ—á–µ—à—å —Å—Ç–∞—Ç—å –∫—Ä—É—Ç—ã–º —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–º? –ù–∞—á–Ω–∏ –∏–≥—Ä—É!',
        '‚òï –í—Ä–µ–º—è –¥–ª—è –∫–æ–¥–∏–Ω–≥–∞! –ó–∞–ø—É—Å–∫–∞–π –∏–≥—Ä—É –∫–æ–º–∞–Ω–¥–æ–π /start',
        'üöÄ nFactorial –∂–¥–µ—Ç —Ç–µ–±—è! –ò—Å–ø–æ–ª—å–∑—É–π /help –µ—Å–ª–∏ –Ω—É–∂–Ω–∞ –ø–æ–º–æ—â—å'
    ];
    
    const randomResponse = responses[Math.floor(Math.random() * responses.length)];
    
    const keyboard = Markup.inlineKeyboard([
        [Markup.button.webApp('üéÆ –ò–≥—Ä–∞—Ç—å!', MINI_APP_URL)]
    ]);
    
    await ctx.reply(randomResponse, keyboard);
});

// ===== –°–ü–ï–¶–ò–ê–õ–¨–ù–´–ï –ö–û–ú–ê–ù–î–´ =====

// –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ - –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞
bot.command('debug', async (ctx) => {
    const debugInfo = `üîß **Debug Info**

ü§ñ Bot: Running
üåê Server: ${MINI_APP_URL}
üë§ User: ${ctx.from.username || ctx.from.first_name}
üí¨ Chat ID: ${ctx.chat.id}
‚è∞ Time: ${new Date().toLocaleString('ru-RU')}

‚úÖ All systems operational!`;

    await ctx.reply(debugInfo, { parse_mode: 'Markdown' });
});

// –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤
bot.command('admin', async (ctx) => {
    // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É –Ω–∞ –∞–¥–º–∏–Ω–∞
    const adminMessage = `üë®‚Äçüíº **–ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å**

üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞:
‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: 0
‚Ä¢ –ò–≥—Ä —Å—ã–≥—Ä–∞–Ω–æ: 0  
‚Ä¢ –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: ${Math.floor(process.uptime() / 60)} –º–∏–Ω

üéÆ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏–≥—Ä–æ–π:
‚Ä¢ Restart server: /restart
‚Ä¢ View logs: /logs
‚Ä¢ Send announcement: /announce`;

    await ctx.reply(adminMessage, { parse_mode: 'Markdown' });
});

// ===== ERROR HANDLING =====

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
bot.catch(async (err, ctx) => {
    console.error('‚ùå Bot error:', err);
    
    try {
        await ctx.reply('üòì –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start');
    } catch (replyError) {
        console.error('‚ùå Error sending error message:', replyError);
    }
});

// Graceful shutdown
process.once('SIGINT', () => {
    console.log('üõë Received SIGINT, stopping bot...');
    bot.stop('SIGINT');
});

process.once('SIGTERM', () => {
    console.log('üõë Received SIGTERM, stopping bot...');
    bot.stop('SIGTERM');
});

// –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
const startBot = async () => {
    try {
        await bot.launch();
        console.log('‚úÖ Bot started successfully!');
        console.log(`üîó @${bot.botInfo?.username || 'unknown'} is running`);
    } catch (error) {
        console.error('‚ùå Failed to start bot:', error);
        process.exit(1);
    }
};

// –≠–∫—Å–ø–æ—Ä—Ç –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ server.js
module.exports = { bot, startBot }; 