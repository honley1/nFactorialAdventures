// –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∏–≥—Ä–æ–≤—ã–µ endpoints –¥–ª—è nFactorial Adventures
const express = require('express');
const { resourceSystem } = require('./resourceSystem');
const User = require('../models/User');
const GameSession = require('../models/GameSession');
const Quest = require('../models/Quest');
const Achievement = require('../models/Achievement');

// Middleware –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
const requireAuth = async (req, res, next) => {
  try {
    const { telegramId } = req.body;
    
    if (!telegramId) {
      return res.status(401).json({ error: 'Unauthorized', message: 'telegramId required' });
    }
    
    const user = await User.findOne({ telegramId: telegramId.toString() });
    if (!user) {
      return res.status(404).json({ error: 'User not found' });
    }
    
    req.user = user;
    next();
  } catch (error) {
    console.error('‚ùå Auth middleware error:', error);
    res.status(500).json({ error: 'Authentication failed' });
  }
};

// GET /api/game/resources/:sessionId - –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å —Ä–µ—Å—É—Ä—Å–æ–≤
const getResourceStatus = async (req, res) => {
  try {
    const { sessionId } = req.params;
    
    const session = await GameSession.findById(sessionId);
    if (!session) {
      return res.status(404).json({
        success: false,
        error: 'Session not found'
      });
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º —Ä–µ—Å—É—Ä—Å—ã
    await resourceSystem.regenerateResources(sessionId);
    const updatedSession = await GameSession.findById(sessionId);

    const resourceStatus = resourceSystem.getResourceStatus(updatedSession.resources);
    const recommendations = resourceSystem.getRecommendations(updatedSession.resources);

    res.json({
      success: true,
      resources: updatedSession.resources,
      status: resourceStatus,
      recommendations,
      timestamp: new Date().toISOString()
    });

  } catch (error) {
    console.error('‚ùå Get resource status error:', error);
    res.status(500).json({
      success: false,
      error: 'Failed to get resource status',
      message: error.message
    });
  }
};

// POST /api/game/action - –í—ã–ø–æ–ª–Ω–∏—Ç—å –∏–≥—Ä–æ–≤–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ
const performAction = async (req, res) => {
  try {
    const { telegramId, sessionId, actionType, location, multiplier = 1 } = req.body;
    
    if (!telegramId || !sessionId || !actionType) {
      return res.status(400).json({
        success: false,
        error: 'Missing required fields: telegramId, sessionId, actionType'
      });
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const user = await User.findOne({ telegramId: telegramId.toString() });
    if (!user) {
      return res.status(404).json({
        success: false,
        error: 'User not found'
      });
    }

    // –í—ã–ø–æ–ª–Ω—è–µ–º –¥–µ–π—Å—Ç–≤–∏–µ —á–µ—Ä–µ–∑ —Å–∏—Å—Ç–µ–º—É —Ä–µ—Å—É—Ä—Å–æ–≤
    const result = await resourceSystem.performAction(sessionId, actionType, multiplier);

    if (!result.success) {
      return res.status(400).json(result);
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–∑–∏—Ü–∏—é –µ—Å–ª–∏ —ç—Ç–æ –¥–≤–∏–∂–µ–Ω–∏–µ
    if (actionType === 'move' && location) {
      await GameSession.findByIdAndUpdate(sessionId, {
        'player.location': location
      });
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –æ–±–Ω–æ–≤–ª—è–µ–º –∫–≤–µ—Å—Ç—ã
    const questUpdates = await checkQuestProgress(user, sessionId, actionType);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
    const achievementUpdates = await checkAchievements(user, sessionId, actionType);

    res.json({
      success: true,
      message: result.message,
      resources: result.resources,
      rewards: result.rewards,
      costs: result.costs,
      questUpdates,
      achievementUpdates,
      timestamp: new Date().toISOString()
    });

  } catch (error) {
    console.error('‚ùå Perform action error:', error);
    res.status(500).json({
      success: false,
      error: 'Failed to perform action',
      message: error.message
    });
  }
};

// POST /api/game/interact - –í–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ —Å –æ–±—ä–µ–∫—Ç–∞–º–∏
const interactWithObject = async (req, res) => {
  try {
    const { telegramId, sessionId, objectType, objectId } = req.body;

    if (!telegramId || !sessionId || !objectType) {
      return res.status(400).json({
        success: false,
        error: 'Missing required fields: telegramId, sessionId, objectType'
      });
    }

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–µ–π—Å—Ç–≤–∏–µ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–∏–ø–∞ –æ–±—ä–µ–∫—Ç–∞
    let actionType;
    switch (objectType) {
      case 'coffee_machine':
        actionType = 'coffee_machine';
        break;
      case 'computer':
        actionType = 'code';
        break;
      case 'mentor':
        actionType = 'mentor_talk';
        break;
      case 'bed':
      case 'rest_zone':
        actionType = 'rest';
        break;
      case 'motivational_poster':
        actionType = 'motivational_speech';
        break;
      default:
        return res.status(400).json({
          success: false,
          error: 'Unknown object type: ' + objectType
        });
    }

    // –í—ã–ø–æ–ª–Ω—è–µ–º –¥–µ–π—Å—Ç–≤–∏–µ
    const result = await resourceSystem.performAction(sessionId, actionType);

    // –î–æ–±–∞–≤–ª—è–µ–º —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—É—é –¥–ª—è –æ–±—ä–µ–∫—Ç–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
    let interactionMessage = result.message;
    if (objectType === 'coffee_machine') {
      interactionMessage = '‚òï –í—ã –∫—É–ø–∏–ª–∏ –∫–æ—Ñ–µ –∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏–ª–∏ —ç–Ω–µ—Ä–≥–∏—é!';
    } else if (objectType === 'mentor') {
      interactionMessage = 'üë®‚Äçüè´ –ú–µ–Ω—Ç–æ—Ä –¥–∞–ª –≤–∞–º —Ü–µ–Ω–Ω—ã–π —Å–æ–≤–µ—Ç –∏ –ø–æ–¥–Ω—è–ª –º–æ—Ç–∏–≤–∞—Ü–∏—é!';
    } else if (objectType === 'computer') {
      interactionMessage = 'üíª –í—ã –Ω–∞–ø–∏—Å–∞–ª–∏ –∫–æ–¥ –∏ –ø–æ–ª—É—á–∏–ª–∏ –∑–Ω–∞–Ω–∏—è!';
    }

    res.json({
      ...result,
      message: interactionMessage,
      objectType,
      timestamp: new Date().toISOString()
    });

  } catch (error) {
    console.error('‚ùå Interact with object error:', error);
    res.status(500).json({
      success: false,
      error: 'Failed to interact with object',
      message: error.message
    });
  }
};

// GET /api/game/time - –ü–æ–ª—É—á–∏—Ç—å –∏–≥—Ä–æ–≤–æ–µ –≤—Ä–µ–º—è
const getGameTime = async (req, res) => {
  try {
    const now = new Date();
    const hour = now.getHours();
    
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≤—Ä–µ–º—è —Å—É—Ç–æ–∫
    let timeOfDay;
    if (hour >= 6 && hour < 12) {
      timeOfDay = 'morning';
    } else if (hour >= 12 && hour < 18) {
      timeOfDay = 'afternoon';
    } else if (hour >= 18 && hour < 22) {
      timeOfDay = 'evening';
    } else {
      timeOfDay = 'night';
    }

    // –ú–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä—ã —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
    const efficiencyModifiers = {
      morning: { coffee: 1.2, motivation: 1.1, knowledge: 1.0, sleep: 0.9 },
      afternoon: { coffee: 1.0, motivation: 1.0, knowledge: 1.2, sleep: 0.8 },
      evening: { coffee: 0.8, motivation: 1.1, knowledge: 0.9, sleep: 0.7 },
      night: { coffee: 0.6, motivation: 0.8, knowledge: 0.7, sleep: 0.5 }
    };

    res.json({
      success: true,
      currentTime: now.toISOString(),
      hour,
      timeOfDay,
      efficiencyModifiers: efficiencyModifiers[timeOfDay],
      dayPhase: {
        name: getTimeOfDayName(timeOfDay),
        icon: getTimeOfDayIcon(timeOfDay),
        description: getTimeOfDayDescription(timeOfDay)
      }
    });

  } catch (error) {
    console.error('‚ùå Get game time error:', error);
    res.status(500).json({
      success: false,
      error: 'Failed to get game time',
      message: error.message
    });
  }
};

// POST /api/game/week/advance - –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ —Å–ª–µ–¥—É—é—â—É—é –Ω–µ–¥–µ–ª—é
const advanceWeek = async (req, res) => {
  try {
    const { telegramId, sessionId } = req.body;

    if (!telegramId || !sessionId) {
      return res.status(400).json({
        success: false,
        error: 'Missing required fields: telegramId, sessionId'
      });
    }

    const session = await GameSession.findById(sessionId);
    if (!session) {
      return res.status(404).json({
        success: false,
        error: 'Session not found'
      });
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–æ–∂–Ω–æ –ª–∏ –ø–µ—Ä–µ–π—Ç–∏ –Ω–∞ —Å–ª–µ–¥—É—é—â—É—é –Ω–µ–¥–µ–ª—é
    if (session.currentWeek >= 10) {
      return res.status(400).json({
        success: false,
        error: 'Already at maximum week (10)'
      });
    }

    // –¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –Ω–∞ —Å–ª–µ–¥—É—é—â—É—é –Ω–µ–¥–µ–ª—é
    const weekRequirements = {
      minKnowledge: session.currentWeek * 50,
      minTotalScore: session.currentWeek * 100,
      completedQuests: Math.min(session.currentWeek * 2, 10)
    };

    const currentKnowledge = session.resources.knowledge || 0;
    const currentScore = session.stats.totalScore || 0;
    const completedQuests = session.completedQuests.length;

    if (currentKnowledge < weekRequirements.minKnowledge) {
      return res.status(400).json({
        success: false,
        error: 'Insufficient knowledge',
        required: weekRequirements.minKnowledge,
        current: currentKnowledge
      });
    }

    if (currentScore < weekRequirements.minTotalScore) {
      return res.status(400).json({
        success: false,
        error: 'Insufficient total score',
        required: weekRequirements.minTotalScore,
        current: currentScore
      });
    }

    if (completedQuests < weekRequirements.completedQuests) {
      return res.status(400).json({
        success: false,
        error: 'Not enough completed quests',
        required: weekRequirements.completedQuests,
        current: completedQuests
      });
    }

    // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ —Å–ª–µ–¥—É—é—â—É—é –Ω–µ–¥–µ–ª—é
    const newWeek = session.currentWeek + 1;
    const weekBonus = newWeek * 50;

    await GameSession.findByIdAndUpdate(sessionId, {
      currentWeek: newWeek,
      'stats.totalScore': currentScore + weekBonus,
      'resources.motivation': Math.min(100, (session.resources.motivation || 0) + 30),
      lastUpdated: new Date()
    });

    res.json({
      success: true,
      message: `–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –ø–µ—Ä–µ—à–ª–∏ –Ω–∞ –Ω–µ–¥–µ–ª—é ${newWeek}!`,
      newWeek,
      weekBonus,
      unlockedContent: getUnlockedContent(newWeek),
      timestamp: new Date().toISOString()
    });

  } catch (error) {
    console.error('‚ùå Advance week error:', error);
    res.status(500).json({
      success: false,
      error: 'Failed to advance week',
      message: error.message
    });
  }
};

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
async function checkQuestProgress(user, sessionId, actionType) {
  // TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –∫–≤–µ—Å—Ç–æ–≤
  return [];
}

async function checkAchievements(user, sessionId, actionType) {
  // TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
  return [];
}

function getTimeOfDayName(timeOfDay) {
  const names = {
    morning: '–£—Ç—Ä–æ',
    afternoon: '–î–µ–Ω—å',
    evening: '–í–µ—á–µ—Ä',
    night: '–ù–æ—á—å'
  };
  return names[timeOfDay] || timeOfDay;
}

function getTimeOfDayIcon(timeOfDay) {
  const icons = {
    morning: 'üåÖ',
    afternoon: '‚òÄÔ∏è',
    evening: 'üåá',
    night: 'üåô'
  };
  return icons[timeOfDay] || 'üïê';
}

function getTimeOfDayDescription(timeOfDay) {
  const descriptions = {
    morning: '–û—Ç–ª–∏—á–Ω–æ–µ –≤—Ä–µ–º—è –¥–ª—è –∫–æ—Ñ–µ –∏ –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ–π —Ä–∞–±–æ—Ç—ã!',
    afternoon: '–ü–∏–∫ –¥–Ω—è - –≤—Ä–µ–º—è –¥–ª—è –æ–±—É—á–µ–Ω–∏—è –∏ –Ω–æ–≤—ã—Ö –∑–Ω–∞–Ω–∏–π!',
    evening: '–í—Ä–µ–º—è –ø–æ–¥–≤–µ–¥–µ–Ω–∏—è –∏—Ç–æ–≥–æ–≤ –∏ –º–æ—Ç–∏–≤–∞—Ü–∏–∏!',
    night: '–ü–æ–∑–¥–Ω–æ, –Ω—É–∂–Ω–æ –æ—Ç–¥–æ—Ö–Ω—É—Ç—å –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è —Å–∏–ª!'
  };
  return descriptions[timeOfDay] || '';
}

function getUnlockedContent(week) {
  const content = {
    2: ['–ù–æ–≤—ã–µ –∫–≤–µ—Å—Ç—ã –ø–æ React', '–î–æ—Å—Ç—É–ø –∫ –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–º –∑–∞–¥–∞–Ω–∏—è–º'],
    3: ['Git –∏ –∫–æ–º–∞–Ω–¥–Ω–∞—è —Ä–∞–±–æ—Ç–∞', '–ü–µ—Ä–≤—ã–µ –ø—Ä–æ–µ–∫—Ç—ã'],
    4: ['Backend —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞', 'API –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è'],
    5: ['–ë–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö', 'MongoDB –ø—Ä–∞–∫—Ç–∏–∫–∞'],
    6: ['–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ', 'Unit —Ç–µ—Å—Ç—ã'],
    7: ['–†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ', 'Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã'],
    8: ['–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è', 'Performance —Ç—Éning'],
    9: ['–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–µ —Ç–µ–º—ã', '–ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞'],
    10: ['–§–∏–Ω–∞–ª—å–Ω—ã–π –ø—Ä–æ–µ–∫—Ç', '–ü—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—è']
  };
  return content[week] || [];
}

module.exports = {
  requireAuth,
  getResourceStatus,
  performAction,
  interactWithObject,
  getGameTime,
  advanceWeek
}; 